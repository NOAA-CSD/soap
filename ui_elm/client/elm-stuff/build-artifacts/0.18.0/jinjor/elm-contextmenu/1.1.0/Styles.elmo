var _jinjor$elm_contextmenu$Styles$fromColor = function (color) {
	var _p0 = _elm_lang$core$Color$toRgb(color);
	var red = _p0.red;
	var green = _p0.green;
	var blue = _p0.blue;
	var alpha = _p0.alpha;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgba(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(red),
			A2(
				_elm_lang$core$Basics_ops['++'],
				',',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(green),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(blue),
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(alpha),
									')'))))))));
};
var _jinjor$elm_contextmenu$Styles$px = function (n) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(n),
		'px');
};
var _jinjor$elm_contextmenu$Styles$icon = function (size) {
	return {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'margin-left',
				_1: _jinjor$elm_contextmenu$Styles$px((0 - size) - 4)
			},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'top', _1: '2px'},
				_1: {ctor: '[]'}
			}
		}
	};
};
var _jinjor$elm_contextmenu$Styles$shortcut = F3(
	function (color, lineHeight, hovered) {
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'line-height',
				_1: _jinjor$elm_contextmenu$Styles$px(lineHeight)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'color',
					_1: hovered ? '' : _jinjor$elm_contextmenu$Styles$fromColor(color)
				},
				_1: {ctor: '[]'}
			}
		};
	});
var _jinjor$elm_contextmenu$Styles$annotation = F4(
	function (color, annotationHeight, fontSize, disabled) {
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2px'},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'line-height',
					_1: _jinjor$elm_contextmenu$Styles$px(annotationHeight)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'font-size',
						_1: _jinjor$elm_contextmenu$Styles$px(fontSize)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'color',
							_1: _jinjor$elm_contextmenu$Styles$fromColor(color)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		};
	});
var _jinjor$elm_contextmenu$Styles$text = function (lineHeight) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'line-height',
			_1: _jinjor$elm_contextmenu$Styles$px(lineHeight)
		},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'text-overflow', _1: 'ellipsis'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'hidden'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'white-space', _1: 'nowrap'},
					_1: {ctor: '[]'}
				}
			}
		}
	};
};
var _jinjor$elm_contextmenu$Styles$row = F8(
	function (hoverColor, disabledTextColor, invertText, usePointer, lineHeight, hovered, disabled, hasShortCut) {
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 18px 0 28px'},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'background-color',
						_1: hovered ? _jinjor$elm_contextmenu$Styles$fromColor(hoverColor) : ''
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'height',
							_1: _jinjor$elm_contextmenu$Styles$px(lineHeight)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'color',
								_1: disabled ? _jinjor$elm_contextmenu$Styles$fromColor(disabledTextColor) : ((hovered && invertText) ? '#fff' : '')
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'cursor',
									_1: ((!disabled) && usePointer) ? 'pointer' : ''
								},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'justify-content',
											_1: hasShortCut ? 'space-between' : ''
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var _jinjor$elm_contextmenu$Styles$borderColor = '#ccc';
var _jinjor$elm_contextmenu$Styles$container = F9(
	function (containerColor, borderWidth, padding, rounded, width, left, top, fontFamily, fontSize) {
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'border-style', _1: 'solid'},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'border-width',
					_1: _jinjor$elm_contextmenu$Styles$px(borderWidth)
				},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border-color', _1: _jinjor$elm_contextmenu$Styles$borderColor},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'position', _1: 'fixed'},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'top',
								_1: _jinjor$elm_contextmenu$Styles$px(top)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'left',
									_1: _jinjor$elm_contextmenu$Styles$px(left)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: _jinjor$elm_contextmenu$Styles$px(width)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'z-index',
											_1: _elm_lang$core$Basics$toString(2147483647 - 10)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'background-color',
												_1: _jinjor$elm_contextmenu$Styles$fromColor(containerColor)
											},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'default'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'box-shadow', _1: '0px 3px 8px 0px rgba(0,0,0,0.3)'},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'padding',
															_1: A2(
																_elm_lang$core$Basics_ops['++'],
																_jinjor$elm_contextmenu$Styles$px(padding),
																' 0')
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'border-radius',
																_1: rounded ? _jinjor$elm_contextmenu$Styles$px(padding) : ''
															},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-family', _1: fontFamily},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'font-size',
																		_1: _jinjor$elm_contextmenu$Styles$px(fontSize)
																	},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var _jinjor$elm_contextmenu$Styles$partition = F2(
	function (borderWidth, margin) {
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'border-bottom-style', _1: 'solid'},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'border-bottom-width',
					_1: _jinjor$elm_contextmenu$Styles$px(1)
				},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border-bottom-color', _1: _jinjor$elm_contextmenu$Styles$borderColor},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-top', _1: 'none'},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'margin',
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									_jinjor$elm_contextmenu$Styles$px(margin),
									' 0')
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
	});
