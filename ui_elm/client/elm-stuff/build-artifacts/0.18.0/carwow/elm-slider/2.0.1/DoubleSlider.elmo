var _carwow$elm_slider$DoubleSlider$snapValue = F2(
	function (value, step) {
		return _elm_lang$core$Basics$toFloat(
			((_elm_lang$core$Basics$round(value) / step) | 0) * step);
	});
var _carwow$elm_slider$DoubleSlider$formatCurrentValue = function (model) {
	return (_elm_lang$core$Native_Utils.eq(model.lowValue, model.min) && _elm_lang$core$Native_Utils.eq(model.highValue, model.max)) ? '' : A2(
		_elm_lang$core$Basics_ops['++'],
		model.formatter(model.lowValue),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' - ',
			model.formatter(model.highValue)));
};
var _carwow$elm_slider$DoubleSlider$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {min: a, max: b, step: c, lowValue: d, highValue: e, dragging: f, draggedValueType: g, rangeStartValue: h, thumbStartingPosition: i, dragStartPosition: j, thumbParentWidth: k, overlapThreshold: l, formatter: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _carwow$elm_slider$DoubleSlider$None = {ctor: 'None'};
var _carwow$elm_slider$DoubleSlider$init = function (config) {
	return {min: config.min, max: config.max, step: config.step, lowValue: config.lowValue, highValue: config.highValue, overlapThreshold: config.overlapThreshold, dragging: false, draggedValueType: _carwow$elm_slider$DoubleSlider$None, rangeStartValue: 0, thumbStartingPosition: 0, thumbParentWidth: 0, dragStartPosition: 0, formatter: config.formatter};
};
var _carwow$elm_slider$DoubleSlider$HighValue = {ctor: 'HighValue'};
var _carwow$elm_slider$DoubleSlider$LowValue = {ctor: 'LowValue'};
var _carwow$elm_slider$DoubleSlider$update = F2(
	function (message, model) {
		var _p0 = message;
		switch (_p0.ctor) {
			case 'RangeChanged':
				var convertedValue = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					_elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toFloat(_p0._1)));
				var newModel = function () {
					var _p1 = _p0._0;
					switch (_p1.ctor) {
						case 'LowValue':
							return _elm_lang$core$Native_Utils.update(
								model,
								{lowValue: convertedValue});
						case 'HighValue':
							return _elm_lang$core$Native_Utils.update(
								model,
								{highValue: convertedValue});
						default:
							return model;
					}
				}();
				return {ctor: '_Tuple3', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none, _2: _p0._2};
			case 'TrackClicked':
				var convertedValue = A2(
					_carwow$elm_slider$DoubleSlider$snapValue,
					A2(
						_elm_lang$core$Maybe$withDefault,
						0,
						_elm_lang$core$Result$toMaybe(
							_elm_lang$core$String$toFloat(_p0._1))),
					model.step);
				var newModel = function () {
					var _p2 = _p0._0;
					switch (_p2.ctor) {
						case 'LowValue':
							return _elm_lang$core$Native_Utils.update(
								model,
								{lowValue: convertedValue});
						case 'HighValue':
							return _elm_lang$core$Native_Utils.update(
								model,
								{highValue: convertedValue});
						default:
							return model;
					}
				}();
				return {ctor: '_Tuple3', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none, _2: true};
			case 'DragStart':
				var _p4 = _p0._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						dragging: true,
						draggedValueType: _p4,
						rangeStartValue: function () {
							var _p3 = _p4;
							switch (_p3.ctor) {
								case 'LowValue':
									return model.lowValue - model.min;
								case 'HighValue':
									return model.highValue - model.min;
								default:
									return 0;
							}
						}(),
						thumbStartingPosition: _p0._2 + 16,
						thumbParentWidth: _p0._3,
						dragStartPosition: _elm_lang$core$Basics$toFloat(_p0._1.x)
					});
				return {ctor: '_Tuple3', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none, _2: false};
			case 'DragAt':
				var delta = _elm_lang$core$Basics$toFloat(_p0._0.x) - model.dragStartPosition;
				var offset = function () {
					var _p5 = model.draggedValueType;
					switch (_p5.ctor) {
						case 'HighValue':
							return model.thumbStartingPosition;
						case 'LowValue':
							return model.thumbParentWidth - model.thumbStartingPosition;
						default:
							return 0;
					}
				}();
				var rangeStart = function () {
					var _p6 = model.draggedValueType;
					switch (_p6.ctor) {
						case 'HighValue':
							return model.rangeStartValue;
						case 'LowValue':
							return (model.max - model.rangeStartValue) - model.min;
						default:
							return 0;
					}
				}();
				var ratio = rangeStart / offset;
				var newValue = function () {
					var _p7 = model.draggedValueType;
					switch (_p7.ctor) {
						case 'HighValue':
							return model.min + A2(_carwow$elm_slider$DoubleSlider$snapValue, (offset + delta) * ratio, model.step);
						case 'LowValue':
							return model.min + A2(_carwow$elm_slider$DoubleSlider$snapValue, ((model.thumbParentWidth - offset) + delta) * ratio, model.step);
						default:
							return 0;
					}
				}();
				var newModel = function () {
					if (_elm_lang$core$Native_Utils.eq(model.draggedValueType, _carwow$elm_slider$DoubleSlider$LowValue) && (_elm_lang$core$Native_Utils.cmp(
						newValue + (_elm_lang$core$Basics$toFloat(model.step) * model.overlapThreshold),
						model.highValue) > 0)) {
						return model;
					} else {
						if (_elm_lang$core$Native_Utils.eq(model.draggedValueType, _carwow$elm_slider$DoubleSlider$HighValue) && (_elm_lang$core$Native_Utils.cmp(
							newValue - (_elm_lang$core$Basics$toFloat(model.step) * model.overlapThreshold),
							model.lowValue) < 0)) {
							return model;
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(newValue, model.min) > -1) && (_elm_lang$core$Native_Utils.cmp(newValue, model.max) < 1)) {
								var _p8 = model.draggedValueType;
								switch (_p8.ctor) {
									case 'LowValue':
										return _elm_lang$core$Native_Utils.update(
											model,
											{lowValue: newValue});
									case 'HighValue':
										return _elm_lang$core$Native_Utils.update(
											model,
											{highValue: newValue});
									default:
										return model;
								}
							} else {
								return model;
							}
						}
					}
				}();
				return {ctor: '_Tuple3', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none, _2: false};
			default:
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dragging: false}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: true
				};
		}
	});
var _carwow$elm_slider$DoubleSlider$RangeChanged = F3(
	function (a, b, c) {
		return {ctor: 'RangeChanged', _0: a, _1: b, _2: c};
	});
var _carwow$elm_slider$DoubleSlider$onRangeChange = F2(
	function (valueType, shouldFetchModels) {
		return A4(
			_elm_lang$core$Json_Decode$map3,
			_carwow$elm_slider$DoubleSlider$RangeChanged,
			_elm_lang$core$Json_Decode$succeed(valueType),
			_elm_lang$html$Html_Events$targetValue,
			_elm_lang$core$Json_Decode$succeed(shouldFetchModels));
	});
var _carwow$elm_slider$DoubleSlider$DragEnd = function (a) {
	return {ctor: 'DragEnd', _0: a};
};
var _carwow$elm_slider$DoubleSlider$DragAt = function (a) {
	return {ctor: 'DragAt', _0: a};
};
var _carwow$elm_slider$DoubleSlider$subscriptions = function (model) {
	return model.dragging ? _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$moves(_carwow$elm_slider$DoubleSlider$DragAt),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$ups(_carwow$elm_slider$DoubleSlider$DragEnd),
				_1: {ctor: '[]'}
			}
		}) : _elm_lang$core$Platform_Sub$none;
};
var _carwow$elm_slider$DoubleSlider$DragStart = F4(
	function (a, b, c, d) {
		return {ctor: 'DragStart', _0: a, _1: b, _2: c, _3: d};
	});
var _carwow$elm_slider$DoubleSlider$onThumbMouseDown = function (valueType) {
	return A5(
		_elm_lang$core$Json_Decode$map4,
		_carwow$elm_slider$DoubleSlider$DragStart,
		_elm_lang$core$Json_Decode$succeed(valueType),
		_elm_lang$mouse$Mouse$position,
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {
					ctor: '::',
					_0: 'offsetLeft',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$float),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {
					ctor: '::',
					_0: 'offsetParent',
					_1: {
						ctor: '::',
						_0: 'offsetWidth',
						_1: {ctor: '[]'}
					}
				}
			},
			_elm_lang$core$Json_Decode$float));
};
var _carwow$elm_slider$DoubleSlider$TrackClicked = F2(
	function (a, b) {
		return {ctor: 'TrackClicked', _0: a, _1: b};
	});
var _carwow$elm_slider$DoubleSlider$onOutsideRangeClick = function (model) {
	var valueDecoder = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (rectangle, mouseX) {
				var newValue = (((model.max - model.min) / rectangle.width) * mouseX) + model.min;
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Basics$round(newValue));
			}),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			_debois$elm_dom$DOM$boundingClientRect),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'offsetX',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$float));
	var valueTypeDecoder = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (rectangle, mouseX) {
				var newValue = A2(_carwow$elm_slider$DoubleSlider$snapValue, (model.max / rectangle.width) * mouseX, model.step);
				var valueType = (_elm_lang$core$Native_Utils.cmp(newValue, model.lowValue) < 0) ? _carwow$elm_slider$DoubleSlider$LowValue : _carwow$elm_slider$DoubleSlider$HighValue;
				return valueType;
			}),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			_debois$elm_dom$DOM$boundingClientRect),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'offsetX',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$float));
	return A3(_elm_lang$core$Json_Decode$map2, _carwow$elm_slider$DoubleSlider$TrackClicked, valueTypeDecoder, valueDecoder);
};
var _carwow$elm_slider$DoubleSlider$onInsideRangeClick = function (model) {
	var valueDecoder = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (rectangle, mouseX) {
				var newValue = A2(_carwow$elm_slider$DoubleSlider$snapValue, (((model.highValue - model.lowValue) / rectangle.width) * mouseX) + model.lowValue, model.step);
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Basics$round(newValue));
			}),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			_debois$elm_dom$DOM$boundingClientRect),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'offsetX',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$float));
	var valueTypeDecoder = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (rectangle, mouseX) {
				var centerThreshold = rectangle.width / 2;
				var valueType = (_elm_lang$core$Native_Utils.cmp(mouseX, centerThreshold) < 0) ? _carwow$elm_slider$DoubleSlider$LowValue : _carwow$elm_slider$DoubleSlider$HighValue;
				return valueType;
			}),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			_debois$elm_dom$DOM$boundingClientRect),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'offsetX',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$float));
	return A3(_elm_lang$core$Json_Decode$map2, _carwow$elm_slider$DoubleSlider$TrackClicked, valueTypeDecoder, valueDecoder);
};
var _carwow$elm_slider$DoubleSlider$fallbackView = function (model) {
	var progressRatio = 100 / (model.max - model.min);
	var progressLow = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.lowValue - model.min) * progressRatio),
		'%');
	var progressHigh = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.max - model.highValue) * progressRatio),
		'%');
	var highValue = _elm_lang$core$Basics$round(model.highValue);
	var lowValue = _elm_lang$core$Basics$round(model.lowValue);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('input-range-container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('range'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$min(
									_elm_lang$core$Basics$toString(model.min)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$max(
										_elm_lang$core$Basics$toString(model.max)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(
											_elm_lang$core$Basics$toString(model.lowValue)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$step(
												_elm_lang$core$Basics$toString(model.step)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('input-range input-range--first'),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html_Events$on,
														'change',
														A2(_carwow$elm_slider$DoubleSlider$onRangeChange, _carwow$elm_slider$DoubleSlider$LowValue, true)),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html_Events$on,
															'input',
															A2(_carwow$elm_slider$DoubleSlider$onRangeChange, _carwow$elm_slider$DoubleSlider$LowValue, false)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('range'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$min(
										_elm_lang$core$Basics$toString(model.min)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$max(
											_elm_lang$core$Basics$toString(model.max)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(
												_elm_lang$core$Basics$toString(model.highValue)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$step(
													_elm_lang$core$Basics$toString(model.step)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('input-range input-range--second'),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html_Events$on,
															'change',
															A2(_carwow$elm_slider$DoubleSlider$onRangeChange, _carwow$elm_slider$DoubleSlider$HighValue, true)),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html_Events$on,
																'input',
																A2(_carwow$elm_slider$DoubleSlider$onRangeChange, _carwow$elm_slider$DoubleSlider$HighValue, false)),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('input-range__track'),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html_Events$on,
											'click',
											_carwow$elm_slider$DoubleSlider$onOutsideRangeClick(model)),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('input-range__progress'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'left', _1: progressLow},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'right', _1: progressHigh},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html_Events$on,
													'click',
													_carwow$elm_slider$DoubleSlider$onInsideRangeClick(model)),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('input-range-labels-container'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('input-range-label'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									model.formatter(model.min)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('input-range-label input-range-label--current-value'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_carwow$elm_slider$DoubleSlider$formatCurrentValue(model)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('input-range-label'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											model.formatter(model.max)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _carwow$elm_slider$DoubleSlider$view = function (model) {
	var progressRatio = 100 / (model.max - model.min);
	var lowThumbStartingPosition = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.lowValue - model.min) * progressRatio),
		'%');
	var highThumbStartingPosition = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.highValue - model.min) * progressRatio),
		'%');
	var progressLow = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.lowValue - model.min) * progressRatio),
		'%');
	var progressHigh = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.max - model.highValue) * progressRatio),
		'%');
	var highValue = _elm_lang$core$Basics$round(model.highValue);
	var lowValue = _elm_lang$core$Basics$round(model.lowValue);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('input-range-container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('slider-thumb slider-thumb--first'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: lowThumbStartingPosition},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A3(
										_elm_lang$html$Html_Events$onWithOptions,
										'mousedown',
										{preventDefault: true, stopPropagation: true},
										_carwow$elm_slider$DoubleSlider$onThumbMouseDown(_carwow$elm_slider$DoubleSlider$LowValue)),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('slider-thumb slider-thumb--second'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'left', _1: highThumbStartingPosition},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A3(
											_elm_lang$html$Html_Events$onWithOptions,
											'mousedown',
											{preventDefault: true, stopPropagation: true},
											_carwow$elm_slider$DoubleSlider$onThumbMouseDown(_carwow$elm_slider$DoubleSlider$HighValue)),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('input-range__track'),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html_Events$on,
											'click',
											_carwow$elm_slider$DoubleSlider$onOutsideRangeClick(model)),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('input-range__progress'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'left', _1: progressLow},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'right', _1: progressHigh},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html_Events$on,
													'click',
													_carwow$elm_slider$DoubleSlider$onInsideRangeClick(model)),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('input-range-labels-container'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('input-range-label'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									model.formatter(model.min)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('input-range-label'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										model.formatter(model.max)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
