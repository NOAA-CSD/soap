var _carwow$elm_slider$SingleSlider$snapValue = F2(
	function (value, step) {
		return _elm_lang$core$Basics$toFloat(
			((_elm_lang$core$Basics$round(value) / step) | 0) * step);
	});
var _carwow$elm_slider$SingleSlider$update = F2(
	function (message, model) {
		var _p0 = message;
		switch (_p0.ctor) {
			case 'TrackClicked':
				var convertedValue = A2(
					_carwow$elm_slider$SingleSlider$snapValue,
					A2(
						_elm_lang$core$Maybe$withDefault,
						0,
						_elm_lang$core$Result$toMaybe(
							_elm_lang$core$String$toFloat(_p0._0))),
					model.step);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{value: convertedValue});
				return {ctor: '_Tuple3', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none, _2: true};
			case 'DragStart':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dragging: true,
							rangeStartValue: model.value,
							thumbStartingPosition: _p0._1 + 8,
							dragStartPosition: _elm_lang$core$Basics$toFloat(_p0._0.x)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: false
				};
			case 'DragAt':
				var ratio = model.rangeStartValue / model.thumbStartingPosition;
				var delta = _elm_lang$core$Basics$toFloat(_p0._0.x) - model.dragStartPosition;
				var newValue = A2(_carwow$elm_slider$SingleSlider$snapValue, (model.thumbStartingPosition + delta) * ratio, model.step);
				var newModel = ((_elm_lang$core$Native_Utils.cmp(newValue, model.min) > -1) && (_elm_lang$core$Native_Utils.cmp(newValue, model.max) < 1)) ? _elm_lang$core$Native_Utils.update(
					model,
					{value: newValue}) : model;
				return {ctor: '_Tuple3', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none, _2: false};
			default:
				var _p1 = A2(_elm_lang$core$Debug$log, 'model', model);
				var _p2 = A2(_elm_lang$core$Debug$log, 'position', _p0._0);
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dragging: false, rangeStartValue: 0, thumbStartingPosition: 0, dragStartPosition: 0}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: true
				};
		}
	});
var _carwow$elm_slider$SingleSlider$init = function (config) {
	return {min: config.min, max: config.max, step: config.step, value: config.value, dragging: false, rangeStartValue: 0, thumbStartingPosition: 0, dragStartPosition: 0};
};
var _carwow$elm_slider$SingleSlider$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {min: a, max: b, step: c, value: d, dragging: e, rangeStartValue: f, thumbStartingPosition: g, dragStartPosition: h};
	});
var _carwow$elm_slider$SingleSlider$DragEnd = function (a) {
	return {ctor: 'DragEnd', _0: a};
};
var _carwow$elm_slider$SingleSlider$DragAt = function (a) {
	return {ctor: 'DragAt', _0: a};
};
var _carwow$elm_slider$SingleSlider$subscriptions = function (model) {
	return model.dragging ? _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$moves(_carwow$elm_slider$SingleSlider$DragAt),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$ups(_carwow$elm_slider$SingleSlider$DragEnd),
				_1: {ctor: '[]'}
			}
		}) : _elm_lang$core$Platform_Sub$none;
};
var _carwow$elm_slider$SingleSlider$DragStart = F2(
	function (a, b) {
		return {ctor: 'DragStart', _0: a, _1: b};
	});
var _carwow$elm_slider$SingleSlider$onThumbMouseDown = A3(
	_elm_lang$core$Json_Decode$map2,
	_carwow$elm_slider$SingleSlider$DragStart,
	_elm_lang$mouse$Mouse$position,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'target',
			_1: {
				ctor: '::',
				_0: 'offsetLeft',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$float));
var _carwow$elm_slider$SingleSlider$TrackClicked = function (a) {
	return {ctor: 'TrackClicked', _0: a};
};
var _carwow$elm_slider$SingleSlider$onOutsideRangeClick = function (model) {
	var valueDecoder = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (rectangle, mouseX) {
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Basics$round((model.max / rectangle.width) * mouseX));
			}),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			_debois$elm_dom$DOM$boundingClientRect),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'offsetX',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$float));
	return A2(_elm_lang$core$Json_Decode$map, _carwow$elm_slider$SingleSlider$TrackClicked, valueDecoder);
};
var _carwow$elm_slider$SingleSlider$onInsideRangeClick = function (model) {
	var valueDecoder = A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (rectangle, mouseX) {
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Basics$round((model.value / rectangle.width) * mouseX));
			}),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			_debois$elm_dom$DOM$boundingClientRect),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'offsetX',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$float));
	return A2(_elm_lang$core$Json_Decode$map, _carwow$elm_slider$SingleSlider$TrackClicked, valueDecoder);
};
var _carwow$elm_slider$SingleSlider$view = function (model) {
	var progress_ratio = 100 / model.max;
	var thumbStartingPosition = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(model.value * progress_ratio),
		'%');
	var progress = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString((model.max - model.value) * progress_ratio),
		'%');
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('input-range-container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('slider-thumb slider-thumb--first'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'left', _1: thumbStartingPosition},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_elm_lang$html$Html_Events$onWithOptions,
								'mousedown',
								{preventDefault: true, stopPropagation: true},
								_carwow$elm_slider$SingleSlider$onThumbMouseDown),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('input-range__track'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'z-index', _1: '1'},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Events$on,
									'click',
									_carwow$elm_slider$SingleSlider$onOutsideRangeClick(model)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('input-range__progress'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'right', _1: progress},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'z-index', _1: '1'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'click',
										_carwow$elm_slider$SingleSlider$onInsideRangeClick(model)),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		});
};
