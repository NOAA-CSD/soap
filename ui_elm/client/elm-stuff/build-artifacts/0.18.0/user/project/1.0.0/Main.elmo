var _user$project$Main$secondElement = function (_p0) {
	var _p1 = _p0;
	return _p1._1;
};
var _user$project$Main$firstElement = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _user$project$Main$thirdElement = function (_p4) {
	var _p5 = _p4;
	return _p5._2;
};
var _user$project$Main$min3 = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p9 = _p6;
		return {
			ctor: '_Tuple3',
			_0: A2(_elm_lang$core$Basics$min, _p8._0, _p9._0),
			_1: A2(_elm_lang$core$Basics$min, _p8._1, _p9._1),
			_2: A2(_elm_lang$core$Basics$min, _p8._2, _p9._2)
		};
	});
var _user$project$Main$max3 = F2(
	function (_p11, _p10) {
		var _p12 = _p11;
		var _p13 = _p10;
		return {
			ctor: '_Tuple3',
			_0: A2(_elm_lang$core$Basics$max, _p12._0, _p13._0),
			_1: A2(_elm_lang$core$Basics$max, _p12._1, _p13._1),
			_2: A2(_elm_lang$core$Basics$max, _p12._2, _p13._2)
		};
	});
var _user$project$Main$findAll = F2(
	function (idx, lists) {
		return A2(
			_elm_lang$core$List$filterMap,
			_elm_community$list_extra$List_Extra$getAt(idx),
			lists);
	});
var _user$project$Main$addDataToList = F3(
	function (size, newData, oldData) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(oldData),
			size) > -1) ? A2(
			_elm_lang$core$List$append,
			{
				ctor: '::',
				_0: newData,
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$take, size - 1, oldData)) : (_elm_lang$core$List$isEmpty(oldData) ? {
			ctor: '::',
			_0: newData,
			_1: {ctor: '[]'}
		} : A2(
			_elm_lang$core$List$append,
			{
				ctor: '::',
				_0: newData,
				_1: {ctor: '[]'}
			},
			oldData));
	});
var _user$project$Main$getNumericField = F2(
	function (reject, num) {
		return _elm_lang$core$Native_Utils.eq(num, reject) ? '' : _elm_lang$core$Basics$toString(num);
	});
var _user$project$Main$toScientific = F2(
	function (x, y) {
		var exp = _elm_lang$core$Basics$floor(
			A2(_elm_lang$core$Basics$logBase, 10, y));
		var num = A2(
			_myrho$elm_round$Round$round,
			x,
			y / Math.pow(
				10,
				_elm_lang$core$Basics$toFloat(exp)));
		var e = (_elm_lang$core$Native_Utils.cmp(exp, 10) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			'0',
			_elm_lang$core$Basics$toString(exp)) : _elm_lang$core$Basics$toString(exp);
		return A2(
			_elm_lang$core$Basics_ops['++'],
			num,
			A2(_elm_lang$core$Basics_ops['++'], 'e', e));
	});
var _user$project$Main$printableNumeric = function (number) {
	return ((_elm_lang$core$Native_Utils.cmp(number, 1.0e-3) > -1) || (_elm_lang$core$Native_Utils.cmp(number, 1000) < 1)) ? A2(_myrho$elm_round$Round$round, 2, number) : A2(_user$project$Main$toScientific, 2, number);
};
var _user$project$Main$convertToFloat = _elm_lang$core$List$map(
	function (a) {
		return _elm_lang$core$Basics$toFloat(a);
	});
var _user$project$Main$getPasTimeData = F3(
	function (model, xstart, dataType) {
		var cell_1 = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$Pas$PasCell(0)(0)(0)(
				{
					ctor: '::',
					_0: 0,
					_1: {
						ctor: '::',
						_0: 0,
						_1: {ctor: '[]'}
					}
				})(0)(0)(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(0),
			A2(_elm_lang$core$Array$get, 1, model.pas.data.cell));
		var cell_0 = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$Pas$PasCell(0)(0)(0)(
				{
					ctor: '::',
					_0: 0,
					_1: {
						ctor: '::',
						_0: 0,
						_1: {ctor: '[]'}
					}
				})(0)(0)(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				})(0),
			A2(_elm_lang$core$Array$get, 0, model.pas.data.cell));
		var data_in = function () {
			var _p14 = dataType;
			switch (_p14.ctor) {
				case 'MicFreq':
					return {ctor: '_Tuple2', _0: cell_0.frequencyData, _1: cell_1.frequencyData};
				case 'MicTime':
					return {
						ctor: '_Tuple2',
						_0: _user$project$Main$convertToFloat(cell_0.timeData),
						_1: _user$project$Main$convertToFloat(cell_1.timeData)
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: _user$project$Main$convertToFloat(cell_0.laserDiodeData),
						_1: _user$project$Main$convertToFloat(cell_1.laserDiodeData)
					};
			}
		}();
		return A4(
			_elm_lang$core$List$map3,
			F3(
				function (i, a, b) {
					return {ctor: '_Tuple3', _0: xstart + i, _1: a, _2: b};
				}),
			_user$project$Main$convertToFloat(
				A2(
					_elm_lang$core$List$range,
					0,
					_elm_lang$core$List$length(
						_elm_lang$core$Tuple$first(data_in)))),
			_elm_lang$core$Tuple$first(data_in),
			_elm_lang$core$Tuple$second(data_in));
	});
var _user$project$Main$getRingdownData = function (model) {
	var cell_1 = A2(
		_elm_lang$core$Maybe$withDefault,
		_user$project$Crd$CrdsCell(0)(0)(0)(0)(0)(0)(0)(0)(0)(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				},
				_1: {ctor: '[]'}
			}),
		A2(_elm_lang$core$Array$get, 1, model.crd.data));
	var raw_data_1 = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_lang$core$List$head(cell_1.ringdowns));
	var cell_0 = A2(
		_elm_lang$core$Maybe$withDefault,
		_user$project$Crd$CrdsCell(0)(0)(0)(0)(0)(0)(0)(0)(0)(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				},
				_1: {ctor: '[]'}
			}),
		A2(_elm_lang$core$Array$get, 0, model.crd.data));
	var raw_data_0 = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_lang$core$List$head(cell_0.ringdowns));
	return A4(
		_elm_lang$core$List$map3,
		F3(
			function (i, a, b) {
				return {ctor: '_Tuple3', _0: i, _1: a, _2: b};
			}),
		_user$project$Main$convertToFloat(
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(raw_data_0))),
		_user$project$Main$convertToFloat(raw_data_0),
		_user$project$Main$convertToFloat(raw_data_1));
};
var _user$project$Main$dataAxis = _terezka$elm_plot$Plot$customAxis(
	function (summary) {
		return {
			position: _terezka$elm_plot$Plot$closestToZero,
			axisLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleLine(summary)),
			ticks: {ctor: '[]'},
			labels: {ctor: '[]'},
			flipAnchor: false
		};
	});
var _user$project$Main$plotData = F2(
	function (data, data_index) {
		var plotf = function (coords) {
			return A2(
				_elm_lang$core$List$map,
				function (_p15) {
					var _p16 = _p15;
					return A3(
						_terezka$elm_plot$Plot$dot,
						A2(_terezka$elm_plot$Plot$viewCircle, 2, 'blue'),
						_p16._0,
						_p16._1);
				},
				coords);
		};
		var pdata = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (idx, d) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Basics$toFloat(idx),
						_1: d
					};
				}),
			A2(_user$project$Main$findAll, data_index, data));
		return A3(
			_terezka$elm_plot$Plot$viewSeriesCustom,
			_elm_lang$core$Native_Utils.update(
				_terezka$elm_plot$Plot$defaultSeriesPlotCustomizations,
				{
					height: 200,
					horizontalAxis: _user$project$Main$dataAxis,
					toDomainLowest: function (y) {
						return A2(_elm_lang$core$Basics$max, y, 0);
					},
					toDomainHighest: function (y) {
						return A2(_elm_lang$core$Basics$min, y, 1500);
					},
					margin: {top: 25, right: 25, bottom: 25, left: 50}
				}),
			{
				ctor: '::',
				_0: _terezka$elm_plot$Plot$line(plotf),
				_1: {ctor: '[]'}
			},
			pdata);
	});
var _user$project$Main$highestRange = F2(
	function (high, y) {
		return A2(_elm_lang$core$Basics$max, high, y);
	});
var _user$project$Main$lowestRange = F2(
	function (low, y) {
		return A2(_elm_lang$core$Basics$min, low, y);
	});
var _user$project$Main$selectData = F2(
	function (selected_, data) {
		return selected_ ? _elm_lang$core$Maybe$Just(data) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Main$timeData = F4(
	function (model, range, data, selectData) {
		var cell0 = function (coords) {
			return A2(
				_elm_lang$core$List$map,
				function (_p17) {
					var _p18 = _p17;
					return A3(
						_terezka$elm_plot$Plot$dot,
						A2(_terezka$elm_plot$Plot$viewCircle, 2, 'blue'),
						_p18._0,
						_p18._1);
				},
				coords);
		};
		var cell1 = function (coords) {
			return A2(
				_elm_lang$core$List$map,
				function (_p19) {
					var _p20 = _p19;
					return A3(
						_terezka$elm_plot$Plot$dot,
						A2(_terezka$elm_plot$Plot$viewCircle, 2, 'red'),
						_p20._0,
						_p20._2);
				},
				coords);
		};
		var seriesList = A2(
			_elm_lang$core$List$filterMap,
			function (x) {
				return _elm_lang$core$Tuple$second(x) ? _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(x)) : _elm_lang$core$Maybe$Nothing;
			},
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				{
					ctor: '::',
					_0: _terezka$elm_plot$Plot$line(cell0),
					_1: {
						ctor: '::',
						_0: _terezka$elm_plot$Plot$line(cell1),
						_1: {ctor: '[]'}
					}
				},
				selectData));
		return A3(
			_terezka$elm_plot$Plot$viewSeriesCustom,
			_elm_lang$core$Native_Utils.update(
				_terezka$elm_plot$Plot$defaultSeriesPlotCustomizations,
				{
					height: 200,
					toRangeLowest: function (y) {
						return range.xmin;
					},
					toRangeHighest: function (y) {
						return range.xmax;
					},
					toDomainLowest: function (y) {
						return range.ymin;
					},
					toDomainHighest: function (y) {
						return range.ymax;
					},
					margin: {top: 25, right: 25, bottom: 25, left: 50}
				}),
			seriesList,
			data);
	});
var _user$project$Main$ringdownTitle = A2(
	_terezka$elm_plot$Plot$viewLabel,
	{
		ctor: '::',
		_0: _elm_lang$svg$Svg_Attributes$fill('#afafaf'),
		_1: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$style('text-anchor: end; font-style: italic;'),
			_1: {ctor: '[]'}
		}
	},
	'Ringdown Data');
var _user$project$Main$getHeaterSP = F2(
	function (model, heater) {
		var _p21 = heater;
		switch (_p21) {
			case 0:
				return model.pas.cvt.heater_0.sp;
			case 1:
				return model.pas.cvt.heater_1.sp;
			case 2:
				return model.crd.cvt.heater.sp;
			default:
				return '';
		}
	});
var _user$project$Main$getHeaterPid = F3(
	function (model, heater, pid) {
		var _p22 = heater;
		switch (_p22) {
			case 0:
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'0',
					A2(_elm_lang$core$Array$get, pid, model.pas.cvt.heater_0.pid));
			case 1:
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'0',
					A2(_elm_lang$core$Array$get, pid, model.pas.cvt.heater_1.pid));
			case 2:
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'0',
					A2(_elm_lang$core$Array$get, pid, model.crd.cvt.heater.pid));
			default:
				return '0';
		}
	});
var _user$project$Main$viewMain = function (model) {
	return A2(_user$project$Main$plotData, model.runningData, 0);
};
var _user$project$Main$interlockIcon = function (model) {
	return model.genData.interlock ? A2(
		_debois$elm_mdl$Material_Icon$view,
		'lock_outline',
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Icon$size24,
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Color$text(
					A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Green, _debois$elm_mdl$Material_Color$S400)),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_debois$elm_mdl$Material_Icon$view,
		'lock_open',
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Icon$size24,
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Color$text(
					A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Red, _debois$elm_mdl$Material_Color$S400)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$viewFooter = function (model) {
	return A2(
		_debois$elm_mdl$Material_Footer$mini,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'position', 'fixed'),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'bottom', '0px'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100%'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '5px'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Color$background(
								A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$LightBlue, _debois$elm_mdl$Material_Color$S400)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			left: A2(
				_debois$elm_mdl$Material_Footer$left,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Footer$logo,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Footer$html(
								_elm_lang$html$Html$text(
									A2(_elm_lang$core$Basics_ops['++'], 'Time: ', model.genData.time))),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			right: A2(
				_debois$elm_mdl$Material_Footer$right,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Footer$logo,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Footer$html(
								A2(
									_debois$elm_mdl$Material_Options$span,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Badge$add(
											_elm_lang$core$Basics$toString(
												A2(
													_elm_lang$core$Maybe$withDefault,
													0,
													A2(_elm_community$list_extra$List_Extra$getAt, 0, model.msgs)))),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'})),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Footer$logo,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Footer$html(
									_user$project$Main$interlockIcon(model)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				})
		});
};
var _user$project$Main$pageHeader = function (model) {
	return {
		ctor: '::',
		_0: A2(
			_debois$elm_mdl$Material_Layout$row,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$nop,
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'transition', 'height 333ms ease-in-out 0s'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Layout$title,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('NOAA SOAP'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$spacer,
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Layout$navigation,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Layout$link,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Layout$link,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Layout$href('https://esrl.noaa.gov/csd'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('noaa'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	};
};
var _user$project$Main$setCvt = F2(
	function (cvt, mdl) {
		return _elm_lang$core$Native_Utils.update(
			mdl,
			{cvt: cvt});
	});
var _user$project$Main$asCvtIn = _elm_lang$core$Basics$flip(_user$project$Main$setCvt);
var _user$project$Main$asPasIn = F2(
	function (model, pas) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{pas: pas});
	});
var _user$project$Main$asVaisalaIn = F2(
	function (model, vaisala) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{vaisalas: vaisala});
	});
var _user$project$Main$asPptIn = F2(
	function (model, ppt) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{ppts: ppt});
	});
var _user$project$Main$asAlicatIn = F2(
	function (model, alicat) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{alicats: alicat});
	});
var _user$project$Main$asCrdIn = F2(
	function (model, crd) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{crd: crd});
	});
var _user$project$Main$asNetworkIn = F2(
	function (model, network) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{network: network});
	});
var _user$project$Main$asDataIn = F2(
	function (model, data) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{genData: data});
	});
var _user$project$Main$asCrdRunningDataIn = F2(
	function (model, ldata) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{crdRunningData: ldata});
	});
var _user$project$Main$asRunningDataIn = F2(
	function (model, ldata) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{runningData: ldata});
	});
var _user$project$Main$getPasCvt = function (model) {
	return model.pas.cvt;
};
var _user$project$Main$getCrdCvt = function (model) {
	return model.crd.cvt;
};
var _user$project$Main$webService = 'soap';
var _user$project$Main$RangeData = F4(
	function (a, b, c, d) {
		return {xmin: a, xmax: b, ymin: c, ymax: d};
	});
var _user$project$Main$defaultModelData = {
	pas: _user$project$Pas$init,
	crd: _user$project$Crd$init,
	genData: _user$project$GcrdTypes$defaultData,
	cvt: _user$project$GcrdTypes$defaultCvtData,
	save: true,
	selectedTab: 0,
	dt: _Bogdanp$elm_time$Time_DateTime$fromTuple(
		{ctor: '_Tuple7', _0: 0, _1: 0, _2: 0, _3: 0, _4: 0, _5: 0, _6: 0}),
	mdl: _debois$elm_mdl$Material$model,
	network: {ip: '192.168.172.123', port_: '8001', service: 'soap'},
	runningData: {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	},
	crdRunningData: {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	},
	currentMsgList: {ctor: '[]'},
	alicats: _user$project$Devices_Alicat$init,
	vaisalas: _user$project$Devices_Vaisala$init,
	ppts: _user$project$Devices_Ppt$init,
	msgs: {
		ctor: '::',
		_0: 0,
		_1: {
			ctor: '::',
			_0: 0,
			_1: {
				ctor: '::',
				_0: 0,
				_1: {ctor: '[]'}
			}
		}
	},
	pasPlotData: {
		ctor: '::',
		_0: true,
		_1: {
			ctor: '::',
			_0: true,
			_1: {
				ctor: '::',
				_0: true,
				_1: {ctor: '[]'}
			}
		}
	},
	pasRange: A4(_user$project$Main$RangeData, 0, 1000, 0, 1500),
	crdPlotData: {
		ctor: '::',
		_0: true,
		_1: {
			ctor: '::',
			_0: true,
			_1: {
				ctor: '::',
				_0: true,
				_1: {ctor: '[]'}
			}
		}
	},
	crdRange: A4(_user$project$Main$RangeData, 0, 1000, 0, 1500)
};
var _user$project$Main$init = function () {
	var model = _user$project$Main$defaultModelData;
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
}();
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return {pas: a, crd: b, genData: c, cvt: d, save: e, selectedTab: f, dt: g, mdl: h, network: i, runningData: j, crdRunningData: k, currentMsgList: l, alicats: m, vaisalas: n, ppts: o, msgs: p, pasPlotData: q, pasRange: r, crdPlotData: s, crdRange: t};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$Pas1Heater = {ctor: 'Pas1Heater'};
var _user$project$Main$Pas0Heater = {ctor: 'Pas0Heater'};
var _user$project$Main$CrdHeater = {ctor: 'CrdHeater'};
var _user$project$Main$RunningData = {ctor: 'RunningData'};
var _user$project$Main$ResetSequence = {ctor: 'ResetSequence'};
var _user$project$Main$SequenceState = {ctor: 'SequenceState'};
var _user$project$Main$SendDevSP = function (a) {
	return {ctor: 'SendDevSP', _0: a};
};
var _user$project$Main$UpdateDevSP = F2(
	function (a, b) {
		return {ctor: 'UpdateDevSP', _0: a, _1: b};
	});
var _user$project$Main$UpdatePasScaling = {ctor: 'UpdatePasScaling'};
var _user$project$Main$UpdatePasRange = F2(
	function (a, b) {
		return {ctor: 'UpdatePasRange', _0: a, _1: b};
	});
var _user$project$Main$TogglePasPlot = function (a) {
	return {ctor: 'TogglePasPlot', _0: a};
};
var _user$project$Main$Pas = function (a) {
	return {ctor: 'Pas', _0: a};
};
var _user$project$Main$SendModulation = function (a) {
	return {ctor: 'SendModulation', _0: a};
};
var _user$project$Main$UpdateMod1 = function (a) {
	return {ctor: 'UpdateMod1', _0: a};
};
var _user$project$Main$UpdateMod0 = function (a) {
	return {ctor: 'UpdateMod0', _0: a};
};
var _user$project$Main$UpdateChirp = {ctor: 'UpdateChirp'};
var _user$project$Main$SendSpkVoltage = {ctor: 'SendSpkVoltage'};
var _user$project$Main$ToggleSpeaker = function (a) {
	return {ctor: 'ToggleSpeaker', _0: a};
};
var _user$project$Main$TogglePasLaserPower = function (a) {
	return {ctor: 'TogglePasLaserPower', _0: a};
};
var _user$project$Main$ToggleCrdPlot = function (a) {
	return {ctor: 'ToggleCrdPlot', _0: a};
};
var _user$project$Main$UpdateCrdScaling = {ctor: 'UpdateCrdScaling'};
var _user$project$Main$UpdateCrdRange = F2(
	function (a, b) {
		return {ctor: 'UpdateCrdRange', _0: a, _1: b};
	});
var _user$project$Main$Crd = function (a) {
	return {ctor: 'Crd', _0: a};
};
var _user$project$Main$SendCrdSampleRate = {ctor: 'SendCrdSampleRate'};
var _user$project$Main$SendCrdFrequency = {ctor: 'SendCrdFrequency'};
var _user$project$Main$ToggleCrdPower = {ctor: 'ToggleCrdPower'};
var _user$project$Main$ToggleHeaterPid = function (a) {
	return {ctor: 'ToggleHeaterPid', _0: a};
};
var _user$project$Main$SendHeaterCtl = function (a) {
	return {ctor: 'SendHeaterCtl', _0: a};
};
var _user$project$Main$UpdateHeaterCtl = F3(
	function (a, b, c) {
		return {ctor: 'UpdateHeaterCtl', _0: a, _1: b, _2: c};
	});
var _user$project$Main$SendHeaterSP = function (a) {
	return {ctor: 'SendHeaterSP', _0: a};
};
var _user$project$Main$UpdateHeaterSP = F2(
	function (a, b) {
		return {ctor: 'UpdateHeaterSP', _0: a, _1: b};
	});
var _user$project$Main$ForceCvtCheck = {ctor: 'ForceCvtCheck'};
var _user$project$Main$CheckCvtData = function (a) {
	return {ctor: 'CheckCvtData', _0: a};
};
var _user$project$Main$HandleGeneric = function (a) {
	return {ctor: 'HandleGeneric', _0: a};
};
var _user$project$Main$toggleHeaterPid = F2(
	function (id, model) {
		var val = function () {
			var _p23 = id;
			switch (_p23.ctor) {
				case 'CrdHeater':
					return {
						instr: 'crd',
						htr: 'heater',
						val: model.crd.cvt.heater.enable_pid ? 0 : 1
					};
				case 'Pas0Heater':
					return {
						instr: 'pas',
						htr: 'heater0',
						val: model.pas.cvt.heater_0.enable_pid ? 0 : 1
					};
				default:
					return {
						instr: 'pas',
						htr: 'heater1',
						val: model.pas.cvt.heater_1.enable_pid ? 0 : 1
					};
			}
		}();
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'heater/enable?heater=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							val.htr,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&instr=',
								A2(
									_elm_lang$core$Basics_ops['++'],
									val.instr,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'&val=',
										_elm_lang$core$Basics$toString(val.val)))))))));
	});
var _user$project$Main$sendHeaterSP = F2(
	function (id, model) {
		var htr = function () {
			var _p24 = id;
			switch (_p24.ctor) {
				case 'CrdHeater':
					return {instr: 'crd', htr: 'heater', sp: model.crd.cvt.heater.sp};
				case 'Pas0Heater':
					return {instr: 'pas', htr: 'heater0', sp: model.pas.cvt.heater_0.sp};
				default:
					return {instr: 'pas', htr: 'heater1', sp: model.pas.cvt.heater_1.sp};
			}
		}();
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'heater/setpoint?sp=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							htr.sp,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&htr=',
								A2(
									_elm_lang$core$Basics_ops['++'],
									htr.htr,
									A2(_elm_lang$core$Basics_ops['++'], '&instr=', htr.instr))))))));
	});
var _user$project$Main$sendHeaterCtl = F2(
	function (id, model) {
		var val = function () {
			var _p25 = id;
			switch (_p25.ctor) {
				case 'CrdHeater':
					return {
						instr: 'crd',
						htr: 'heater',
						p: A2(
							_elm_lang$core$Maybe$withDefault,
							'1',
							A2(_elm_lang$core$Array$get, 0, model.crd.cvt.heater.pid)),
						i: A2(
							_elm_lang$core$Maybe$withDefault,
							'0',
							A2(_elm_lang$core$Array$get, 1, model.crd.cvt.heater.pid)),
						d: A2(
							_elm_lang$core$Maybe$withDefault,
							'0',
							A2(_elm_lang$core$Array$get, 2, model.crd.cvt.heater.pid))
					};
				case 'Pas0Heater':
					return {
						instr: 'pas',
						htr: 'heater0',
						p: A2(
							_elm_lang$core$Maybe$withDefault,
							'1',
							A2(_elm_lang$core$Array$get, 0, model.pas.cvt.heater_0.pid)),
						i: A2(
							_elm_lang$core$Maybe$withDefault,
							'0',
							A2(_elm_lang$core$Array$get, 1, model.pas.cvt.heater_0.pid)),
						d: A2(
							_elm_lang$core$Maybe$withDefault,
							'0',
							A2(_elm_lang$core$Array$get, 2, model.pas.cvt.heater_0.pid))
					};
				default:
					return {
						instr: 'pas',
						htr: 'heater1',
						p: A2(
							_elm_lang$core$Maybe$withDefault,
							'1',
							A2(_elm_lang$core$Array$get, 0, model.pas.cvt.heater_1.pid)),
						i: A2(
							_elm_lang$core$Maybe$withDefault,
							'0',
							A2(_elm_lang$core$Array$get, 1, model.pas.cvt.heater_1.pid)),
						d: A2(
							_elm_lang$core$Maybe$withDefault,
							'0',
							A2(_elm_lang$core$Array$get, 2, model.pas.cvt.heater_1.pid))
					};
			}
		}();
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'heater/ctl?heater=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							val.htr,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&d=',
								A2(
									_elm_lang$core$Basics_ops['++'],
									val.d,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'&i=',
										A2(
											_elm_lang$core$Basics_ops['++'],
											val.i,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'&p=',
												A2(
													_elm_lang$core$Basics_ops['++'],
													val.p,
													A2(_elm_lang$core$Basics_ops['++'], '&instr=', val.instr))))))))))));
	});
var _user$project$Main$sendNewTime = F2(
	function (t, model) {
		var lvTime = (t - _Bogdanp$elm_time$Time_DateTime$toTimestamp(
			_Bogdanp$elm_time$Time_DateTime$dateTime(
				_elm_lang$core$Native_Utils.update(
					_Bogdanp$elm_time$Time_DateTime$zero,
					{year: 1904})))) / 1000;
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'time?t=',
						_elm_lang$core$Basics$toString(lvTime)))));
	});
var _user$project$Main$changeSequenceState = F2(
	function (state, model) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'SequenceState?st=', state))));
	});
var _user$project$Main$toggleSave = function (model) {
	var s = model.save ? '1' : '0';
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(_elm_lang$core$Basics_ops['++'], 'SaveMain?save_=', s))));
};
var _user$project$Main$sendDevSp = F3(
	function (idx, dev, model) {
		var sp = A2(_elm_lang$core$Maybe$withDefault, '0', dev.sp);
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'UpdateDevSP?sp=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							sp,
							A2(_elm_lang$core$Basics_ops['++'], '&idx=', idx))))));
	});
var _user$project$Main$updateWaveforms = function (model) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'PAS/UpdateSerializeWvfm?page=',
					_elm_lang$core$Basics$toString(model.selectedTab)))));
};
var _user$project$Main$sendFanVoltage = function (model) {
	var val = _elm_lang$core$Basics$toString(model.cvt.fan_voltage);
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(_elm_lang$core$Basics_ops['++'], 'UpdateFanVoltage?voltage=', val))));
};
var _user$project$Main$setCrdRate = function (model) {
	var s = _elm_lang$core$Basics$toString(model.crd.cvt.dc);
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(_elm_lang$core$Basics_ops['++'], 'CRD/samp_per_cycle?samp_cycle=', s))));
};
var _user$project$Main$setCrdFrequency = function (model) {
	var f = _elm_lang$core$Basics$toString(model.crd.cvt.rate);
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(_elm_lang$core$Basics_ops['++'], 'CRD/laser_rep_rate?RepRate=', f))));
};
var _user$project$Main$sendChirp = function (model) {
	var center = _elm_lang$core$Basics$toString(model.pas.cvt.spk.center);
	var df = _elm_lang$core$Basics$toString(model.pas.cvt.spk.df);
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'PAS/chirp?fcenter=',
					A2(
						_elm_lang$core$Basics_ops['++'],
						center,
						A2(_elm_lang$core$Basics_ops['++'], '&df=', df))))));
};
var _user$project$Main$toggleSpk = F3(
	function (model, val, cell) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'PAS/SpeakerState?state=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							val,
							A2(_elm_lang$core$Basics_ops['++'], '&cell=', cell))))));
	});
var _user$project$Main$sendSpkVoltage = function (model) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'PAS/spk_voltage?Vscale=',
					A2(
						_elm_lang$core$Basics_ops['++'],
						model.pas.cvt.spk.vscale,
						A2(_elm_lang$core$Basics_ops['++'], '&Voffset=', model.pas.cvt.spk.voffset))))));
};
var _user$project$Main$setCellFrequency = F3(
	function (model, cell, frequency) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'PAS/mod_frequency?fmod=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							frequency,
							A2(_elm_lang$core$Basics_ops['++'], '&cell=', cell))))));
	});
var _user$project$Main$toggleUV = F2(
	function (model, val) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'ToggleUVLamp?lamp=', val))));
	});
var _user$project$Main$toggleO2 = F2(
	function (model, val) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'ToggleO2?valve=', val))));
	});
var _user$project$Main$toggleO3 = F2(
	function (model, val) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'ToggleO3?valve=', val))));
	});
var _user$project$Main$toggleFan = F2(
	function (model, val) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'ToggleFan?enable=', val))));
	});
var _user$project$Main$toggleFilter = function (model) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'ToggleFilter?cell=',
					_elm_lang$core$Basics$toString(model.cvt.filter.pos)))));
};
var _user$project$Main$togglePump = function (model) {
	var val = model.cvt.pump ? '1' : '0';
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				A2(_elm_lang$core$Basics_ops['++'], 'TogglePump?Pump=', val))));
};
var _user$project$Main$toggleCrdPower = F2(
	function (model, val) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'CRD/cLaserState?state=', val))));
	});
var _user$project$Main$togglePasLaserPower = F3(
	function (model, val, cell) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$HandleGeneric,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'PAS/pLaserState?state=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							val,
							A2(_elm_lang$core$Basics_ops['++'], '&cell=', cell))))));
	});
var _user$project$Main$shutdownSystem = function (model) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$HandleGeneric,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				'Shutdown')));
};
var _user$project$Main$InitializeNetwork = function (a) {
	return {ctor: 'InitializeNetwork', _0: a};
};
var _user$project$Main$GetData = function (a) {
	return {ctor: 'GetData', _0: a};
};
var _user$project$Main$getData = function (model) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$GetData,
		_elm_lang$http$Http$getString(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Network$buildAddress(model.network),
				'data')));
};
var _user$project$Main$GetCVT = function (a) {
	return {ctor: 'GetCVT', _0: a};
};
var _user$project$Main$getCvtData = F2(
	function (model, force) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Main$GetCVT,
			_elm_lang$http$Http$getString(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Network$buildAddress(model.network),
					A2(_elm_lang$core$Basics_ops['++'], 'cvt?force=', force))));
	});
var _user$project$Main$UpdateFanVoltage = function (a) {
	return {ctor: 'UpdateFanVoltage', _0: a};
};
var _user$project$Main$ToggleFan = {ctor: 'ToggleFan'};
var _user$project$Main$ToggleUSB = {ctor: 'ToggleUSB'};
var _user$project$Main$ToggleUVLamp = {ctor: 'ToggleUVLamp'};
var _user$project$Main$TogglePump = {ctor: 'TogglePump'};
var _user$project$Main$ToggleFilter = {ctor: 'ToggleFilter'};
var _user$project$Main$ToggleO2 = {ctor: 'ToggleO2'};
var _user$project$Main$ToggleO3 = {ctor: 'ToggleO3'};
var _user$project$Main$StopServer = {ctor: 'StopServer'};
var _user$project$Main$SaveData = {ctor: 'SaveData'};
var _user$project$Main$SyncTime = {ctor: 'SyncTime'};
var _user$project$Main$ClearMessages = {ctor: 'ClearMessages'};
var _user$project$Main$UpdateTime = function (a) {
	return {ctor: 'UpdateTime', _0: a};
};
var _user$project$Main$getCurrentTime = A2(_elm_lang$core$Task$perform, _user$project$Main$UpdateTime, _elm_lang$core$Time$now);
var _user$project$Main$Network = function (a) {
	return {ctor: 'Network', _0: a};
};
var _user$project$Main$CheckData = function (a) {
	return {ctor: 'CheckData', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$CheckCvtData),
			_1: {
				ctor: '::',
				_0: _user$project$Network$initPort(_user$project$Main$InitializeNetwork),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$CheckData),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$viewAux = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A3(
							_debois$elm_mdl$Material_Options$styled,
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Typography$headline,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Heater Controls'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (index, heater) {
							var x = function () {
								var _p26 = index;
								switch (_p26) {
									case 0:
										return _user$project$Main$Pas0Heater;
									case 1:
										return _user$project$Main$Pas1Heater;
									case 2:
										return _user$project$Main$CrdHeater;
									default:
										return _user$project$Main$CrdHeater;
								}
							}();
							return A2(
								_debois$elm_mdl$Material_Grid$cell,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$div,
										{
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'border-style', 'solid'),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'border-width', '1px'),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'border-radius', '5px'),
													_1: {
														ctor: '::',
														_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-left', '10px'),
														_1: {
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-top', '10px'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										},
										{
											ctor: '::',
											_0: A3(
												_debois$elm_mdl$Material_Options$styled,
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Typography$title,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(heater),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A5(
													_debois$elm_mdl$Material_Toggles$switch,
													_user$project$Main$Mdl,
													{
														ctor: '::',
														_0: 18 + (5 * index),
														_1: {ctor: '[]'}
													},
													model.mdl,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Toggles$ripple,
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Power'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A5(
														_debois$elm_mdl$Material_Textfield$render,
														_user$project$Main$Mdl,
														{
															ctor: '::',
															_0: 19 + (5 * index),
															_1: {ctor: '[]'}
														},
														model.mdl,
														{
															ctor: '::',
															_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
															_1: {
																ctor: '::',
																_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$value(
																			A2(_user$project$Main$getHeaterSP, model, index)),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onInput(
																				_user$project$Main$UpdateHeaterSP(x)),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options$onBlur(
																					_user$project$Main$SendHeaterSP(x)),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Textfield$label('Setpoint'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A5(
															_debois$elm_mdl$Material_Textfield$render,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 20 + (5 * index),
																_1: {ctor: '[]'}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																_1: {
																	ctor: '::',
																	_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onInput(
																				A2(_user$project$Main$UpdateHeaterCtl, x, 0)),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options$onBlur(
																					_user$project$Main$SendHeaterCtl(x)),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Textfield$value(
																						A3(_user$project$Main$getHeaterPid, model, index, 0)),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$label('P'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A5(
																_debois$elm_mdl$Material_Textfield$render,
																_user$project$Main$Mdl,
																{
																	ctor: '::',
																	_0: 21 + (5 * index),
																	_1: {ctor: '[]'}
																},
																model.mdl,
																{
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																	_1: {
																		ctor: '::',
																		_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options$onInput(
																					A2(_user$project$Main$UpdateHeaterCtl, x, 1)),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Options$onBlur(
																						_user$project$Main$SendHeaterCtl(x)),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$value(
																							A3(_user$project$Main$getHeaterPid, model, index, 1)),
																						_1: {
																							ctor: '::',
																							_0: _debois$elm_mdl$Material_Textfield$label('I'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A5(
																	_debois$elm_mdl$Material_Textfield$render,
																	_user$project$Main$Mdl,
																	{
																		ctor: '::',
																		_0: 22 + (5 * index),
																		_1: {ctor: '[]'}
																	},
																	model.mdl,
																	{
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																		_1: {
																			ctor: '::',
																			_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Options$onInput(
																						A2(_user$project$Main$UpdateHeaterCtl, x, 2)),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Options$onBlur(
																							_user$project$Main$SendHeaterCtl(x)),
																						_1: {
																							ctor: '::',
																							_0: _debois$elm_mdl$Material_Textfield$value(
																								A3(_user$project$Main$getHeaterPid, model, index, 2)),
																							_1: {
																								ctor: '::',
																								_0: _debois$elm_mdl$Material_Textfield$label('D'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								});
						}),
					{
						ctor: '::',
						_0: 'PAS 0',
						_1: {
							ctor: '::',
							_0: 'PAS 1',
							_1: {
								ctor: '::',
								_0: 'CRD',
								_1: {ctor: '[]'}
							}
						}
					}),
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Grid$cell,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A3(
									_debois$elm_mdl$Material_Options$styled,
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Typography$headline,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Fan Control'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Grid$cell,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 10),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Slider$view(
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Slider$value(model.cvt.fan_voltage),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Slider$onChange(_user$project$Main$UpdateFanVoltage),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Slider$max(5),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Slider$min(0),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Slider$step(0.1),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Grid$cell,
									{
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(model.cvt.fan_voltage)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Grid$cell,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 3),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_List$ul,
									{ctor: '[]'},
									A2(
										_elm_lang$core$List$indexedMap,
										F2(
											function (index, temp) {
												return A2(
													_debois$elm_mdl$Material_List$li,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_List$content,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(temp),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_List$content2,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		_user$project$Main$printableNumeric(
																			A2(_user$project$GcrdTypes$getTemperature, index, model.genData.temperatures))),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													});
											}),
										{
											ctor: '::',
											_0: 'PAS Channel 1',
											_1: {
												ctor: '::',
												_0: 'PAS Channel 2',
												_1: {
													ctor: '::',
													_0: 'PAS Laser Head 1',
													_1: {
														ctor: '::',
														_0: 'PAS Laser Head 2',
														_1: {
															ctor: '::',
															_0: 'Box Exit',
															_1: {
																ctor: '::',
																_0: 'CRD Heater',
																_1: {
																	ctor: '::',
																	_0: 'Box Inlet',
																	_1: {
																		ctor: '::',
																		_0: 'CRD Laser Head',
																		_1: {
																			ctor: '::',
																			_0: 'CJC 1',
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										})),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Grid$cell,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A3(
										_debois$elm_mdl$Material_Options$styled,
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Typography$headline,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Device List'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Grid$cell,
									{
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Table$table,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Table$thead,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Table$tr,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Device'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Type'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('SN'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Address'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Model'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Active?'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Table$tbody,
														{ctor: '[]'},
														A2(
															_elm_lang$core$List$map,
															function (dev) {
																var device = _elm_lang$core$Tuple$second(dev);
																var c = device.active ? 'black' : 'red';
																return A2(
																	_debois$elm_mdl$Material_Table$tr,
																	{
																		ctor: '::',
																		_0: A2(_debois$elm_mdl$Material_Options$css, 'color', c),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$td,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(device.label),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$td,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(device.type_),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$td,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(device.sn),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$td,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(device.address),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$td,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(device.model),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$td,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(device.active)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	});
															},
															_elm_lang$core$List$concat(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Dict$toList(model.alicats.cvt),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$core$Dict$toList(model.vaisalas.cvt),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$Dict$toList(model.ppts.cvt),
																			_1: {ctor: '[]'}
																		}
																	}
																}))),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Grid$cell,
										{
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A3(
												_debois$elm_mdl$Material_Options$styled,
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Typography$headline,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Alicat'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Grid$cell,
											{
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
												_1: {ctor: '[]'}
											},
											A2(
												_elm_lang$core$List$indexedMap,
												F2(
													function (i, dev) {
														var device = _elm_lang$core$Tuple$second(dev);
														var idx = _elm_lang$core$Tuple$first(dev);
														var m = (device.active && device.controller) ? A5(
															_debois$elm_mdl$Material_Textfield$render,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 12 + i,
																_1: {ctor: '[]'}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																_1: {
																	ctor: '::',
																	_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Textfield$value(
																				A2(_elm_lang$core$Maybe$withDefault, '0', device.sp)),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options$onInput(
																					_user$project$Main$UpdateDevSP(idx)),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Options$onBlur(
																						_user$project$Main$SendDevSP(idx)),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$label(device.label),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															},
															{ctor: '[]'}) : _elm_lang$html$Html$text('');
														return m;
													}),
												_elm_lang$core$Dict$toList(model.alicats.cvt))),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Grid$cell,
												{
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 10),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Table$table,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$thead,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$tr,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('ID'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Pressure'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Temperature'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Flow Rate'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Setpoint'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Mass Flow Rate'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$tr,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('mb'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('degC'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('lpm'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('lpm'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$th,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('slpm'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$tbody,
																	{ctor: '[]'},
																	A2(
																		_elm_lang$core$List$map,
																		function (dev) {
																			var dcvt = _elm_lang$core$Tuple$second(dev);
																			var id = _elm_lang$core$Tuple$first(dev);
																			var data = A2(
																				_elm_lang$core$Maybe$withDefault,
																				_user$project$Devices_Alicat$defaultData,
																				A2(_elm_lang$core$Dict$get, id, model.alicats.data));
																			return A2(
																				_debois$elm_mdl$Material_Table$tr,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$td,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(dcvt.label),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$td,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(
																										A2(_elm_lang$core$Maybe$withDefault, 0, data.pressure))),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$td,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(
																											A2(_elm_lang$core$Maybe$withDefault, 0, data.temperature))),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$td,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_elm_lang$core$Basics$toString(data.output)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$td,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(
																													A2(_elm_lang$core$Maybe$withDefault, 0, data.setpoint))),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_debois$elm_mdl$Material_Table$td,
																											{ctor: '[]'},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text(
																													_elm_lang$core$Basics$toString(
																														A2(_elm_lang$core$Maybe$withDefault, 0, data.mass_flow))),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				});
																		},
																		_elm_lang$core$Dict$toList(model.alicats.cvt))),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Grid$cell,
													{
														ctor: '::',
														_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A3(
															_debois$elm_mdl$Material_Options$styled,
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Typography$headline,
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Vaisala'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Grid$cell,
														{
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 10),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$table,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$thead,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$tr,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('ID'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Temperature'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Relative Humidity'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Dew Point'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$tr,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('degC'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('%'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$th,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('degC'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$tbody,
																			{ctor: '[]'},
																			A2(
																				_elm_lang$core$List$map,
																				function (dev) {
																					var dcvt = _elm_lang$core$Tuple$second(dev);
																					var id = _elm_lang$core$Tuple$first(dev);
																					var data = A2(
																						_elm_lang$core$Maybe$withDefault,
																						A3(_user$project$Devices_Vaisala$Data, 0, 0, 0),
																						A2(_elm_lang$core$Dict$get, id, model.vaisalas.data));
																					return A2(
																						_debois$elm_mdl$Material_Table$tr,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$td,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(dcvt.label),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$td,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_elm_lang$core$Basics$toString(data.temperature)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$td,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(data.relative_humidity)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_debois$elm_mdl$Material_Table$td,
																											{ctor: '[]'},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text(
																													_elm_lang$core$Basics$toString(data.dewpoint)),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						});
																				},
																				_elm_lang$core$Dict$toList(model.vaisalas.cvt))),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Grid$cell,
															{
																ctor: '::',
																_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A3(
																	_debois$elm_mdl$Material_Options$styled,
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Typography$headline,
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Honeywell PPT'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Grid$cell,
																{
																	ctor: '::',
																	_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 10),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$table,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$thead,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$tr,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('ID'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Pressure'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$th,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Temperature'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$tr,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$th,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$th,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('mb'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_debois$elm_mdl$Material_Table$th,
																											{ctor: '[]'},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('degC'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$tbody,
																					{ctor: '[]'},
																					A2(
																						_elm_lang$core$List$map,
																						function (dev) {
																							var dcvt = _elm_lang$core$Tuple$second(dev);
																							var id = _elm_lang$core$Tuple$first(dev);
																							var data = A2(
																								_elm_lang$core$Maybe$withDefault,
																								A2(_user$project$Devices_Ppt$Data, 0, 0),
																								A2(_elm_lang$core$Dict$get, id, model.ppts.data));
																							return A2(
																								_debois$elm_mdl$Material_Table$tr,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: A2(
																										_debois$elm_mdl$Material_Table$td,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(dcvt.label),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_debois$elm_mdl$Material_Table$td,
																											{ctor: '[]'},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text(
																													_elm_lang$core$Basics$toString(data.pressure)),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_debois$elm_mdl$Material_Table$td,
																												{ctor: '[]'},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														_elm_lang$core$Basics$toString(data.temperature)),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}
																									}
																								});
																						},
																						_elm_lang$core$Dict$toList(model.ppts.cvt))),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}))));
};
var _user$project$Main$textfield = F6(
	function (num, model, label, value, input_msg, blur_msg) {
		return A5(
			_debois$elm_mdl$Material_Textfield$render,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: num,
				_1: {ctor: '[]'}
			},
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Textfield$value(value),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onInput(input_msg),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (lab) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Textfield$label(lab),
									_1: {ctor: '[]'}
								};
							},
							label)),
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (msg) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onBlur(msg),
									_1: {ctor: '[]'}
								};
							},
							blur_msg)))),
			{ctor: '[]'});
	});
var _user$project$Main$viewConfig = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-bottom', '50px'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 3),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 5),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Phone, 3),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A6(
						_user$project$Main$textfield,
						0,
						model,
						_elm_lang$core$Maybe$Just('IP Address'),
						model.network.ip,
						function (_p27) {
							return _user$project$Main$Network(
								_user$project$Network$UpdateIP(_p27));
						},
						_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: A6(
							_user$project$Main$textfield,
							1,
							model,
							_elm_lang$core$Maybe$Just('Port'),
							model.network.port_,
							function (_p28) {
								return _user$project$Main$Network(
									_user$project$Network$UpdatePort(_p28));
							},
							_elm_lang$core$Maybe$Nothing),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$floatTextfield = F6(
	function (num, model, label, value, input_msg, blur_msg) {
		return A5(
			_debois$elm_mdl$Material_Textfield$render,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: num,
				_1: {ctor: '[]'}
			},
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Textfield$value(
									_elm_lang$core$Basics$toString(value)),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onInput(input_msg),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (lab) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Textfield$label(lab),
									_1: {ctor: '[]'}
								};
							},
							label)),
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (msg) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onBlur(msg),
									_1: {ctor: '[]'}
								};
							},
							blur_msg)))),
			{ctor: '[]'});
	});
var _user$project$Main$button = F4(
	function (num, btn_txt, model, msg) {
		return A5(
			_debois$elm_mdl$Material_Button$render,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: num,
				_1: {ctor: '[]'}
			},
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Button$raised,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$ripple,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$primary,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(msg),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(btn_txt),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$viewDrawer = function (model) {
	return {
		ctor: '::',
		_0: A5(
			_debois$elm_mdl$Material_Toggles$switch,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: 10,
				_1: {ctor: '[]'}
			},
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Toggles$ripple,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Toggles$value(model.cvt.save),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$SaveData),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Save'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A4(_user$project$Main$button, 1, 'Stop Server', model, _user$project$Main$StopServer),
			_1: {
				ctor: '::',
				_0: A4(_user$project$Main$button, 9, 'Sync Time', model, _user$project$Main$SyncTime),
				_1: {
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Toggles$radio,
						_user$project$Main$Mdl,
						{
							ctor: '::',
							_0: 2,
							_1: {ctor: '[]'}
						},
						model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Toggles$value(false),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Toggles$group('FilterPath'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Toggles$ripple,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Toggles$value(
											_elm_lang$core$Native_Utils.eq(model.cvt.filter.pos, 0)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$ToggleFilter),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Channel 1'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Toggles$radio,
									_user$project$Main$Mdl,
									{
										ctor: '::',
										_0: 3,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Toggles$value(true),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Toggles$group('FilterPath'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Toggles$ripple,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Toggles$value(
														_elm_lang$core$Native_Utils.eq(model.cvt.filter.pos, 1)),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$ToggleFilter),
														_1: {
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Channel 2'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Toggles$switch,
								_user$project$Main$Mdl,
								{
									ctor: '::',
									_0: 7,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Toggles$ripple,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Toggles$value(model.cvt.cal_state.o3_add),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$ToggleO3),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('O3 Addition'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Toggles$switch,
									_user$project$Main$Mdl,
									{
										ctor: '::',
										_0: 4,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Toggles$ripple,
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Toggles$value(model.cvt.cal_state.o2_add),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$ToggleO2),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('O2 Addition'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Toggles$switch,
										_user$project$Main$Mdl,
										{
											ctor: '::',
											_0: 5,
											_1: {ctor: '[]'}
										},
										model.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Toggles$ripple,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Toggles$value(model.cvt.pump),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$TogglePump),
													_1: {
														ctor: '::',
														_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Pump'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A5(
											_debois$elm_mdl$Material_Toggles$switch,
											_user$project$Main$Mdl,
											{
												ctor: '::',
												_0: 6,
												_1: {ctor: '[]'}
											},
											model.mdl,
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Toggles$ripple,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Toggles$value(model.cvt.cal_state.uv_lamp),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$ToggleUVLamp),
														_1: {
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('UV Lamp'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A5(
												_debois$elm_mdl$Material_Toggles$switch,
												_user$project$Main$Mdl,
												{
													ctor: '::',
													_0: 8,
													_1: {ctor: '[]'}
												},
												model.mdl,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Toggles$ripple,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Toggles$value(model.cvt.fan),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$ToggleFan),
															_1: {
																ctor: '::',
																_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Fan'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Main$viewCal = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Toggles$switch,
						_user$project$Main$Mdl,
						{
							ctor: '::',
							_0: 11,
							_1: {ctor: '[]'}
						},
						model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Toggles$ripple,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Toggles$value(
									_elm_lang$core$Native_Utils.eq(model.cvt.sequence_state, 'Run')),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onToggle(_user$project$Main$SequenceState),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Run Sequence'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A4(_user$project$Main$button, 106, 'Reset Sequence', model, _user$project$Main$ResetSequence),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 3),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_List$ul,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_List$li,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_List$withBody,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_List$content,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Speaker'),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_List$body,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Use this to toggle the speaker.  '),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_List$li,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_List$withBody,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_List$content,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Flow Path'),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_List$body,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Use this to toggle the flow path. '),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_List$li,
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_List$withBody,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_List$content,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('UV Lamp'),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_List$body,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Toggle power to the UV lamp.'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_List$li,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_List$withBody,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_List$content,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('O2 Valve'),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_List$body,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Toggle O2 valve.'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_List$li,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_List$withBody,
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_List$content,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('O3 Valve'),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_List$body,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Toggle O3 valve.'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$cell,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 3),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_List$ul,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_List$li,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_List$content,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Speaker'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_List$content2,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A5(
															_debois$elm_mdl$Material_Toggles$checkbox,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 4,
																_1: {ctor: '[]'}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Toggles$value(true),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_List$li,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_List$content,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Radio button!'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_List$content2,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Options$span,
																{
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_List$action2,
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A5(
																		_debois$elm_mdl$Material_Toggles$radio,
																		_user$project$Main$Mdl,
																		{
																			ctor: '::',
																			_0: 5,
																			_1: {ctor: '[]'}
																		},
																		model.mdl,
																		{
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Toggles$value(true),
																			_1: {
																				ctor: '::',
																				_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'inline'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_List$li,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_List$content,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Include switch?'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_List$content2,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A5(
																	_debois$elm_mdl$Material_Toggles$switch,
																	_user$project$Main$Mdl,
																	{
																		ctor: '::',
																		_0: 6,
																		_1: {ctor: '[]'}
																	},
																	model.mdl,
																	{
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Toggles$value(true),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$viewStatus = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A3(
						_debois$elm_mdl$Material_Options$styled,
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Typography$title,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('System Messages'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$div,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'max-height', '250px'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'overflow', 'scroll'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'border', '1px solid grey'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'border-radius', '4px'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							A2(
								_elm_lang$core$List$map,
								function (msg) {
									var msg_color = A2(_elm_lang$core$String$contains, '[ERROR]', msg) ? 'red' : (A2(_elm_lang$core$String$contains, '[WARNING]', msg) ? 'yellow' : 'black');
									return A3(
										_debois$elm_mdl$Material_Options$styled,
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Typography$body1,
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'color', msg_color),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100%'),
													_1: {
														ctor: '::',
														_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '0'),
														_1: {
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '0'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(msg),
											_1: {ctor: '[]'}
										});
								},
								model.currentMsgList)),
						_1: {
							ctor: '::',
							_0: A4(_user$project$Main$button, 10, 'Clear', model, _user$project$Main$ClearMessages),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$intTextfield = F6(
	function (num, model, label, value, input_msg, blur_msg) {
		return A5(
			_debois$elm_mdl$Material_Textfield$render,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: num,
				_1: {ctor: '[]'}
			},
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Textfield$value(
									_elm_lang$core$Basics$toString(value)),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onInput(input_msg),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (lab) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Textfield$label(lab),
									_1: {ctor: '[]'}
								};
							},
							label)),
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (msg) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onBlur(msg),
									_1: {ctor: '[]'}
								};
							},
							blur_msg)))),
			{ctor: '[]'});
	});
var _user$project$Main$txtfield = F6(
	function (num, model, label, value, input_msg, blur_msg) {
		return A5(
			_debois$elm_mdl$Material_Textfield$render,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: num,
				_1: {ctor: '[]'}
			},
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Textfield$value(value),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onInput(input_msg),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (lab) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Textfield$label(lab),
									_1: {ctor: '[]'}
								};
							},
							label)),
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (msg) {
								return {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onBlur(msg),
									_1: {ctor: '[]'}
								};
							},
							blur_msg)))),
			{ctor: '[]'});
	});
var _user$project$Main$toggle = F5(
	function (num, txt, val, model, msg) {
		return A5(
			_debois$elm_mdl$Material_Toggles$switch,
			_user$project$Main$Mdl,
			{
				ctor: '::',
				_0: num,
				_1: {ctor: '[]'}
			},
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Toggles$ripple,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Toggles$value(val),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onToggle(msg),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(txt),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$viewCrd = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 2),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Textfield$render,
						_user$project$Main$Mdl,
						{
							ctor: '::',
							_0: 1,
							_1: {ctor: '[]'}
						},
						model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$label('f (Hz)'),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '75px'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Textfield$value(
												A2(_user$project$Main$getNumericField, 0, model.crd.cvt.rate)),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onInput(
													function (_p29) {
														return _user$project$Main$Crd(
															_user$project$Crd$UpdateFrequency(_p29));
													}),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onBlur(_user$project$Main$SendCrdFrequency),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Textfield$render,
							_user$project$Main$Mdl,
							{
								ctor: '::',
								_0: 2,
								_1: {ctor: '[]'}
							},
							model.mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Textfield$label('Samples per Cycle'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '75px'),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Textfield$maxlength(4),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Textfield$value(
													_elm_lang$core$Basics$toString(model.crd.cvt.dc)),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onInput(
														function (_p30) {
															return _user$project$Main$Crd(
																_user$project$Crd$UpdateDutyCycle(_p30));
														}),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onBlur(_user$project$Main$SendCrdSampleRate),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A5(_user$project$Main$toggle, 11, 'Power', model.crd.cvt.power, model, _user$project$Main$ToggleCrdPower),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 10),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 6),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Grid$grid,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Grid$cell,
									{
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Table$table,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Table$thead,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Table$tr,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('ID'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html_Attributes$property,
																						'innerHTML',
																						_elm_lang$core$Json_Encode$string('&tau;')),
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html_Attributes$property,
																							'innerHTML',
																							_elm_lang$core$Json_Encode$string('&tau;<sub>0</sub>')),
																						_1: {ctor: '[]'}
																					},
																					{ctor: '[]'}),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html_Attributes$property,
																								'innerHTML',
																								_elm_lang$core$Json_Encode$string('&tau;<sub>0</sub>\'')),
																							_1: {ctor: '[]'}
																						},
																						{ctor: '[]'}),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html_Attributes$property,
																									'innerHTML',
																									_elm_lang$core$Json_Encode$string('&tau;\'')),
																								_1: {ctor: '[]'}
																							},
																							{ctor: '[]'}),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html_Attributes$property,
																										'innerHTML',
																										_elm_lang$core$Json_Encode$string('&sigma;')),
																									_1: {ctor: '[]'}
																								},
																								{ctor: '[]'}),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('max'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$tr,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$th,
																		{ctor: '[]'},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('(us)'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('(us)'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('(us)'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('(us)'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html_Attributes$property,
																											'innerHTML',
																											_elm_lang$core$Json_Encode$string('Mm<sup>-1</sup>')),
																										_1: {ctor: '[]'}
																									},
																									{ctor: '[]'}),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('(a.u.)'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Table$tbody,
														{ctor: '[]'},
														A2(
															_elm_lang$core$List$map,
															function (cell) {
																var data = _elm_lang$core$Tuple$second(cell);
																var id = _elm_lang$core$Tuple$first(cell);
																return A2(
																	_debois$elm_mdl$Material_Table$tr,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$td,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(id),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$td,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_user$project$Main$printableNumeric(data.tau)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$td,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_user$project$Main$printableNumeric(data.tau0)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$td,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_user$project$Main$printableNumeric(data.tau0corr)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$td,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_user$project$Main$printableNumeric(data.tauCorrected)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$td,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_user$project$Main$printableNumeric(data.extinction)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_debois$elm_mdl$Material_Table$td,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_user$project$Main$printableNumeric(data.max)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	});
															},
															A3(
																_elm_lang$core$List$map2,
																F2(
																	function (v0, v1) {
																		return {ctor: '_Tuple2', _0: v0, _1: v1};
																	}),
																model.crd.cvt.labels,
																_elm_lang$core$Array$toList(model.crd.data)))),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Grid$cell,
										{
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A4(
												_user$project$Main$timeData,
												model,
												model.crdRange,
												_user$project$Main$getRingdownData(model),
												model.crdPlotData),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Grid$cell,
											{
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A5(
													_debois$elm_mdl$Material_Toggles$checkbox,
													_user$project$Main$Mdl,
													{
														ctor: '::',
														_0: 100,
														_1: {ctor: '[]'}
													},
													model.mdl,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Toggles$value(
															A2(
																_elm_lang$core$Maybe$withDefault,
																false,
																A2(_elm_community$list_extra$List_Extra$getAt, 0, model.crdPlotData))),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Toggles$ripple,
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$onToggle(
																	_user$project$Main$ToggleCrdPlot(0)),
																_1: {
																	ctor: '::',
																	_0: A2(_debois$elm_mdl$Material_Options$css, 'color', 'blue'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Channel 1'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A5(
														_debois$elm_mdl$Material_Toggles$checkbox,
														_user$project$Main$Mdl,
														{
															ctor: '::',
															_0: 101,
															_1: {ctor: '[]'}
														},
														model.mdl,
														{
															ctor: '::',
															_0: _debois$elm_mdl$Material_Toggles$value(
																A2(
																	_elm_lang$core$Maybe$withDefault,
																	false,
																	A2(_elm_community$list_extra$List_Extra$getAt, 1, model.crdPlotData))),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$onToggle(
																	_user$project$Main$ToggleCrdPlot(1)),
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Toggles$ripple,
																	_1: {
																		ctor: '::',
																		_0: A2(_debois$elm_mdl$Material_Options$css, 'color', 'red'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Channel 2'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A5(
															_debois$elm_mdl$Material_Textfield$render,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 103,
																_1: {ctor: '[]'}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Textfield$value(
																		_elm_lang$core$Basics$toString(model.crdRange.xmin)),
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Options$onInput(
																			_user$project$Main$UpdateCrdRange('xmin')),
																		_1: {
																			ctor: '::',
																			_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Textfield$label('xMin'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A5(
																_debois$elm_mdl$Material_Textfield$render,
																_user$project$Main$Mdl,
																{
																	ctor: '::',
																	_0: 103,
																	_1: {ctor: '[]'}
																},
																model.mdl,
																{
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$value(
																			_elm_lang$core$Basics$toString(model.crdRange.xmax)),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onInput(
																				_user$project$Main$UpdateCrdRange('xmax')),
																			_1: {
																				ctor: '::',
																				_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$label('xMax'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A5(
																	_debois$elm_mdl$Material_Textfield$render,
																	_user$project$Main$Mdl,
																	{
																		ctor: '::',
																		_0: 104,
																		_1: {ctor: '[]'}
																	},
																	model.mdl,
																	{
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Textfield$value(
																				_elm_lang$core$Basics$toString(model.crdRange.ymin)),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options$onInput(
																					_user$project$Main$UpdateCrdRange('ymin')),
																				_1: {
																					ctor: '::',
																					_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																						_1: {
																							ctor: '::',
																							_0: _debois$elm_mdl$Material_Textfield$label('yMin'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A5(
																		_debois$elm_mdl$Material_Textfield$render,
																		_user$project$Main$Mdl,
																		{
																			ctor: '::',
																			_0: 105,
																			_1: {ctor: '[]'}
																		},
																		model.mdl,
																		{
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Textfield$value(
																					_elm_lang$core$Basics$toString(model.crdRange.ymax)),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Options$onInput(
																						_user$project$Main$UpdateCrdRange('ymax')),
																					_1: {
																						ctor: '::',
																						_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																						_1: {
																							ctor: '::',
																							_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																							_1: {
																								ctor: '::',
																								_0: _debois$elm_mdl$Material_Textfield$label('yMax'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A4(_user$project$Main$button, 106, 'Autoscale 1x', model, _user$project$Main$UpdateCrdScaling),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Grid$cell,
												{
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(_user$project$Main$plotData, model.crdRunningData, 0),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$PhotoDiodDiode = {ctor: 'PhotoDiodDiode'};
var _user$project$Main$MicTime = {ctor: 'MicTime'};
var _user$project$Main$MicFreq = {ctor: 'MicFreq'};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p31 = msg;
		switch (_p31.ctor) {
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p31._0, model);
			case 'SelectTab':
				var new_model = _elm_lang$core$Native_Utils.update(
					model,
					{selectedTab: _p31._0});
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: _user$project$Main$updateWaveforms(new_model)
				};
			case 'CheckCvtData':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$getCvtData, model, '0')
				};
			case 'ForceCvtCheck':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$getCvtData, model, '1')
				};
			case 'CheckData':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$getData(model)
				};
			case 'Network':
				var new_model = A2(
					_user$project$Main$asNetworkIn,
					model,
					A2(_user$project$Network$update, _p31._0, model.network));
				var ip = new_model.network.ip;
				var port_ = new_model.network.port_;
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: _user$project$Network$updateIpConfig(
						{
							ctor: '::',
							_0: ip,
							_1: {
								ctor: '::',
								_0: port_,
								_1: {ctor: '[]'}
							}
						})
				};
			case 'Pas':
				var new_model = A2(
					_user$project$Main$asPasIn,
					model,
					A2(_user$project$Pas$update, _p31._0, model.pas));
				return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Crd':
				var new_model = A2(
					_user$project$Main$asCrdIn,
					model,
					A2(_user$project$Crd$update, _p31._0, model.crd));
				return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SaveData':
				var new_model = _elm_lang$core$Native_Utils.update(
					model,
					{save: !model.save});
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: _user$project$Main$toggleSave(new_model)
				};
			case 'StopServer':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$shutdownSystem(model)
				};
			case 'ToggleO3':
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					A2(
						_user$project$GcrdTypes$asCalibrationIn,
						model.cvt,
						_user$project$GcrdTypes$toggleO3AddPosition(model.cvt.cal_state)));
				var val = new_model.cvt.cal_state.o3_add ? '1' : '0';
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A2(_user$project$Main$toggleO3, new_model, val)
				};
			case 'ToggleO2':
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					A2(
						_user$project$GcrdTypes$asCalibrationIn,
						model.cvt,
						_user$project$GcrdTypes$toggleO2AddPosition(model.cvt.cal_state)));
				var val = new_model.cvt.cal_state.o2_add ? '1' : '0';
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A2(_user$project$Main$toggleO2, new_model, val)
				};
			case 'ToggleFilter':
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					A2(
						_user$project$GcrdTypes$asFilterIn,
						model.cvt,
						_user$project$GcrdTypes$toggleFilterPosition(model.cvt.filter)));
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: _user$project$Main$toggleFilter(new_model)
				};
			case 'TogglePump':
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					_user$project$GcrdTypes$switchPump(model.cvt));
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: _user$project$Main$togglePump(new_model)
				};
			case 'ToggleUVLamp':
				var val = model.cvt.cal_state.uv_lamp ? '0' : '1';
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					A2(
						_user$project$GcrdTypes$asCalibrationIn,
						model.cvt,
						_user$project$GcrdTypes$toggleUVLampPosition(model.cvt.cal_state)));
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A2(_user$project$Main$toggleUV, new_model, val)
				};
			case 'ToggleUSB':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'GetCVT':
				if (_p31._0.ctor === 'Ok') {
					var _p32 = _p31._0._0;
					var dev_cvt = A2(
						_elm_lang$core$Result$withDefault,
						_user$project$Devices_Device$defaultDeviceDict,
						A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Devices_Device$decodeDeviceCvt, _p32));
					var a_model = A2(
						_user$project$Main$asAlicatIn,
						model,
						A2(_user$project$Devices_Alicat$insertAlicatDev, dev_cvt, model.alicats));
					var v_model = A2(
						_user$project$Main$asVaisalaIn,
						a_model,
						A2(_user$project$Devices_Vaisala$insertVaisalaDev, dev_cvt, a_model.vaisalas));
					var p_model = A2(
						_user$project$Main$asPptIn,
						v_model,
						A2(_user$project$Devices_Ppt$insertPptDev, dev_cvt, v_model.ppts));
					var new_model = A2(
						_user$project$Main$asCvtIn,
						p_model,
						A2(
							_elm_lang$core$Result$withDefault,
							_user$project$GcrdTypes$defaultCvtData,
							A2(
								_elm_lang$core$Json_Decode$decodeString,
								_user$project$GcrdTypes$decodeCvt(p_model.cvt),
								_p32)));
					var model_with_crd = A2(
						_user$project$Main$asCrdIn,
						new_model,
						A2(
							_user$project$Crd$asCvtIn,
							new_model.crd,
							A3(_user$project$Crd$retrieveCrdCvt, 'crd', _p32, new_model.crd.cvt)));
					var model_with_pas = A2(
						_user$project$Main$asPasIn,
						model_with_crd,
						A2(
							_user$project$Pas$asCvtIn,
							model_with_crd.pas,
							A3(_user$project$Pas$retrievePasCvt, 'pas', _p32, model_with_crd.pas.cvt)));
					var nmodel = _elm_lang$core$Native_Utils.eq(_p32, '{}') ? model : model_with_pas;
					return {ctor: '_Tuple2', _0: nmodel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var data_ = A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$Debug$log, 'CVT-Error', 'There was an error contacting '),
						_user$project$Network$buildAddress(model.network));
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetData':
				if (_p31._0.ctor === 'Ok') {
					var _p33 = _p31._0._0;
					var rCrdData = A2(
						_elm_lang$core$Maybe$withDefault,
						_user$project$Crd$CrdsCell(0)(0)(0)(0)(0)(0)(0)(0)(0)(
							{
								ctor: '::',
								_0: {
									ctor: '::',
									_0: 0,
									_1: {ctor: '[]'}
								},
								_1: {ctor: '[]'}
							}),
						A2(_elm_lang$core$Array$get, 1, model.crd.data));
					var cListData = {
						ctor: '::',
						_0: rCrdData.tau,
						_1: {
							ctor: '::',
							_0: rCrdData.tau0,
							_1: {
								ctor: '::',
								_0: rCrdData.max,
								_1: {ctor: '[]'}
							}
						}
					};
					var rPasData = A2(
						_elm_lang$core$Maybe$withDefault,
						_user$project$Pas$PasCell(0)(0)(0)(
							{
								ctor: '::',
								_0: 0,
								_1: {
									ctor: '::',
									_0: 0,
									_1: {ctor: '[]'}
								}
							})(0)(0)(
							{
								ctor: '::',
								_0: 0,
								_1: {ctor: '[]'}
							})(
							{
								ctor: '::',
								_0: 0,
								_1: {ctor: '[]'}
							})(
							{
								ctor: '::',
								_0: 0,
								_1: {ctor: '[]'}
							})(
							{
								ctor: '::',
								_0: 0,
								_1: {ctor: '[]'}
							})(0),
						A2(_elm_lang$core$Array$get, 1, model.pas.data.cell));
					var listData = {
						ctor: '::',
						_0: rPasData.resonant_frequency,
						_1: {
							ctor: '::',
							_0: rPasData.integrated_area,
							_1: {
								ctor: '::',
								_0: rPasData.laserRMS,
								_1: {
									ctor: '::',
									_0: rPasData.absorption,
									_1: {ctor: '[]'}
								}
							}
						}
					};
					var crd_cell_data = A3(_user$project$Crd$retrieveCrdData, 'CellData', _p33, model.crd.data);
					var new_model = A2(
						_user$project$Main$asCrdIn,
						model,
						A2(_user$project$Crd$asDataIn, model.crd, crd_cell_data));
					var newest_model = A2(
						_user$project$Main$asAlicatIn,
						new_model,
						A2(_user$project$Devices_Alicat$getAlicatData, new_model.alicats, _p33));
					var newestest_model = A2(
						_user$project$Main$asVaisalaIn,
						newest_model,
						A2(_user$project$Devices_Vaisala$getVaisalaData, newest_model.vaisalas, _p33));
					var p_model = A2(
						_user$project$Main$asPptIn,
						newestest_model,
						A2(_user$project$Devices_Ppt$getPptData, newestest_model.ppts, _p33));
					var newer_model = A2(
						_user$project$Main$asDataIn,
						p_model,
						A2(
							_elm_lang$core$Result$withDefault,
							p_model.genData,
							A2(
								_elm_lang$core$Json_Decode$decodeString,
								A2(_elm_lang$core$Json_Decode$field, 'general', _user$project$GcrdTypes$decodeData),
								_p33)));
					var pas_model = A2(
						_user$project$Main$asPasIn,
						newer_model,
						A4(
							_user$project$Pas$truncateFrequencyData,
							1,
							1200,
							1500,
							A4(
								_user$project$Pas$truncateFrequencyData,
								0,
								1200,
								1500,
								A3(_user$project$Pas$retrievePasData, 'PAS', _p33, newer_model.pas))));
					var n_model = A2(
						_user$project$Main$asRunningDataIn,
						pas_model,
						A3(_user$project$Main$addDataToList, 10, listData, pas_model.runningData));
					var nn_model = A2(
						_user$project$Main$asCrdRunningDataIn,
						n_model,
						A3(_user$project$Main$addDataToList, 100, cListData, n_model.crdRunningData));
					var nn_msgs = _elm_lang$core$Native_Utils.update(
						nn_model,
						{
							currentMsgList: A2(_elm_lang$core$List$append, nn_model.currentMsgList, nn_model.genData.msg)
						});
					return {ctor: '_Tuple2', _0: nn_msgs, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'HandleGeneric':
				if (_p31._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'InitializeNetwork':
				var _p34 = _p31._0;
				var p = _elm_lang$core$Tuple$second(_p34);
				var ip = _elm_lang$core$Tuple$first(_p34);
				var network = model.network;
				var network_ = _elm_lang$core$Native_Utils.update(
					network,
					{ip: ip});
				var new_model = _elm_lang$core$Native_Utils.update(
					model,
					{
						network: _elm_lang$core$Native_Utils.update(
							network_,
							{port_: p})
					});
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A2(_user$project$Main$getCvtData, new_model, '1')
				};
			case 'ToggleSpeaker':
				var _p37 = _p31._0;
				var ncell = _elm_lang$core$Native_Utils.eq(_p37, 0) ? '0' : '1';
				var new_model = function () {
					var _p35 = _p37;
					switch (_p35) {
						case 0:
							return A2(
								_user$project$Main$asPasIn,
								model,
								A2(
									_user$project$Pas$asCvtIn,
									model.pas,
									_user$project$Pas$toggleSpeaker0Position(model.pas.cvt)));
						case 1:
							return A2(
								_user$project$Main$asPasIn,
								model,
								A2(
									_user$project$Pas$asCvtIn,
									model.pas,
									_user$project$Pas$toggleSpeaker1Position(model.pas.cvt)));
						default:
							return model;
					}
				}();
				var val = function () {
					var _p36 = _p37;
					switch (_p36) {
						case 0:
							return new_model.pas.cvt.speaker_0 ? '1' : '0';
						case 1:
							return new_model.pas.cvt.speaker_1 ? '1' : '0';
						default:
							return '1';
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A3(_user$project$Main$toggleSpk, new_model, val, ncell)
				};
			case 'UpdateMod0':
				var f_ = A2(
					_elm_lang$core$Result$withDefault,
					1350,
					_elm_lang$core$String$toInt(_p31._0));
				var new_model = A2(
					_user$project$Main$asPasIn,
					model,
					A2(
						_user$project$Pas$asCvtIn,
						model.pas,
						A2(_user$project$Pas$setFrequency0, f_, model.pas.cvt)));
				return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateMod1':
				var f_ = A2(
					_elm_lang$core$Result$withDefault,
					1350,
					_elm_lang$core$String$toInt(_p31._0));
				var new_model = A2(
					_user$project$Main$asPasIn,
					model,
					A2(
						_user$project$Pas$asCvtIn,
						model.pas,
						A2(_user$project$Pas$setFrequency1, f_, model.pas.cvt)));
				return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SendModulation':
				var _p38 = _p31._0;
				var freq = _elm_lang$core$Native_Utils.eq(_p38, '1') ? model.pas.cvt.fmod_1 : model.pas.cvt.fmod_0;
				var f = _elm_lang$core$Basics$toString(freq);
				var index = A2(
					_elm_lang$core$Result$withDefault,
					0,
					_elm_lang$core$String$toInt(_p38));
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_user$project$Main$setCellFrequency, model, _p38, f)
				};
			case 'SendCrdFrequency':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$setCrdFrequency(model)
				};
			case 'SendCrdSampleRate':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$setCrdRate(model)
				};
			case 'ToggleCrdPower':
				var new_model = A2(
					_user$project$Main$asCrdIn,
					model,
					A2(
						_user$project$Crd$asCvtIn,
						model.crd,
						_user$project$Crd$togglePower(model.crd.cvt)));
				var val = new_model.crd.cvt.power ? '1' : '0';
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A2(_user$project$Main$toggleCrdPower, model, val)
				};
			case 'ToggleHeaterPid':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$toggleHeaterPid, _p31._0, model)
				};
			case 'UpdateHeaterSP':
				var _p41 = _p31._1;
				var _p40 = _p31._0;
				var nsp = A2(_elm_lang$core$Debug$log, 'heater_sp', _p41);
				var nid = A2(_elm_lang$core$Debug$log, 'heater_id', _p40);
				var _p39 = _p40;
				switch (_p39.ctor) {
					case 'CrdHeater':
						var new_model = A2(
							_user$project$Main$asCrdIn,
							model,
							A2(
								_user$project$Crd$asCvtIn,
								model.crd,
								A2(
									_user$project$Crd$asHeaterIn,
									model.crd.cvt,
									A2(_user$project$Crd$setHeaterSP, _p41, model.crd.cvt.heater))));
						return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
					case 'Pas0Heater':
						var new_model = A2(
							_user$project$Main$asPasIn,
							model,
							A2(
								_user$project$Pas$asCvtIn,
								model.pas,
								A2(
									_user$project$Pas$asHeater0In,
									model.pas.cvt,
									A2(_user$project$Pas$setHeaterSP, _p41, model.pas.cvt.heater_0))));
						return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
					default:
						var new_model = A2(
							_user$project$Main$asPasIn,
							model,
							A2(
								_user$project$Pas$asCvtIn,
								model.pas,
								A2(
									_user$project$Pas$asHeater1In,
									model.pas.cvt,
									A2(_user$project$Pas$setHeaterSP, _p41, model.pas.cvt.heater_1))));
						return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdateHeaterCtl':
				var _p44 = _p31._2;
				var _p43 = _p31._1;
				var _p42 = _p31._0;
				switch (_p42.ctor) {
					case 'CrdHeater':
						var new_model = A2(
							_user$project$Main$asCrdIn,
							model,
							A2(
								_user$project$Crd$asCvtIn,
								model.crd,
								A2(
									_user$project$Crd$asHeaterIn,
									model.crd.cvt,
									A2(
										_user$project$Crd$setHeaterPID,
										A3(_elm_lang$core$Array$set, _p43, _p44, model.crd.cvt.heater.pid),
										model.crd.cvt.heater))));
						return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
					case 'Pas0Heater':
						var new_model = A2(
							_user$project$Main$asPasIn,
							model,
							A2(
								_user$project$Pas$asCvtIn,
								model.pas,
								A2(
									_user$project$Pas$asHeater0In,
									model.pas.cvt,
									A2(
										_user$project$Pas$setHeaterPID,
										A3(_elm_lang$core$Array$set, _p43, _p44, model.pas.cvt.heater_0.pid),
										model.pas.cvt.heater_0))));
						return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
					default:
						var new_model = A2(
							_user$project$Main$asPasIn,
							model,
							A2(
								_user$project$Pas$asCvtIn,
								model.pas,
								A2(
									_user$project$Pas$asHeater1In,
									model.pas.cvt,
									A2(
										_user$project$Pas$setHeaterPID,
										A3(_elm_lang$core$Array$set, _p43, _p44, model.pas.cvt.heater_1.pid),
										model.pas.cvt.heater_1))));
						return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SendHeaterSP':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$sendHeaterSP, _p31._0, model)
				};
			case 'SendHeaterCtl':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$sendHeaterCtl, _p31._0, model)
				};
			case 'TogglePasLaserPower':
				var _p46 = _p31._0;
				var c = _elm_lang$core$Basics$toString(_p46);
				var new_model = A2(
					_user$project$Main$asPasIn,
					model,
					A2(
						_user$project$Pas$asCvtIn,
						model.pas,
						A2(_user$project$Pas$toggleLaserPower, _p46, model.pas.cvt)));
				var cmd = function () {
					var _p45 = _p46;
					switch (_p45) {
						case 0:
							var val = new_model.pas.cvt.enable_0 ? '1' : '0';
							return A3(
								_user$project$Main$togglePasLaserPower,
								new_model,
								val,
								_elm_lang$core$Basics$toString(_p46));
						case 1:
							var val = new_model.pas.cvt.enable_1 ? '1' : '0';
							return A3(
								_user$project$Main$togglePasLaserPower,
								new_model,
								val,
								_elm_lang$core$Basics$toString(_p46));
						default:
							return _elm_lang$core$Platform_Cmd$none;
					}
				}();
				return {ctor: '_Tuple2', _0: new_model, _1: cmd};
			case 'ClearMessages':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentMsgList: {ctor: '[]'}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SendSpkVoltage':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$sendSpkVoltage(model)
				};
			case 'UpdateChirp':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$sendChirp(model)
				};
			case 'ToggleFan':
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					A2(_user$project$GcrdTypes$setFanEnable, !model.cvt.fan, model.cvt));
				var val = new_model.cvt.fan ? '1' : '0';
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: A2(_user$project$Main$toggleFan, new_model, val)
				};
			case 'UpdateFanVoltage':
				var new_model = A2(
					_user$project$Main$asCvtIn,
					model,
					A2(_user$project$GcrdTypes$setFanVoltage, _p31._0, model.cvt));
				return {
					ctor: '_Tuple2',
					_0: new_model,
					_1: _user$project$Main$sendFanVoltage(new_model)
				};
			case 'UpdateDevSP':
				var _p47 = _p31._0;
				var dev = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$Devices_Device$defaultDevice,
					A2(_elm_lang$core$Dict$get, _p47, model.alicats.cvt));
				var new_dev = A2(_user$project$Devices_Device$setSpIn, _p31._1, dev);
				var new_model = A2(
					_user$project$Main$asAlicatIn,
					model,
					A2(
						_user$project$Devices_Alicat$asCvtIn,
						model.alicats,
						A3(_elm_lang$core$Dict$insert, _p47, new_dev, model.alicats.cvt)));
				return {ctor: '_Tuple2', _0: new_model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SendDevSP':
				var _p48 = _p31._0;
				var dev = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$Devices_Device$defaultDevice,
					A2(_elm_lang$core$Dict$get, _p48, model.alicats.cvt));
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_user$project$Main$sendDevSp, _p48, dev, model)
				};
			case 'UpdateTime':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$sendNewTime, _p31._0, model)
				};
			case 'SyncTime':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$getCurrentTime};
			case 'TogglePasPlot':
				var _p49 = _p31._0;
				var d = A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(_elm_community$list_extra$List_Extra$getAt, _p49, model.pasPlotData));
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						pasPlotData: A3(_elm_community$list_extra$List_Extra$setAt, _p49, !d, model.pasPlotData)
					});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdatePasRange':
				var range = model.pasRange;
				var v = A2(
					_elm_lang$core$Result$withDefault,
					0,
					_elm_lang$core$String$toFloat(_p31._1));
				var newRange = function () {
					var _p50 = _p31._0;
					switch (_p50) {
						case 'xmin':
							return _elm_lang$core$Native_Utils.update(
								range,
								{xmin: v});
						case 'xmax':
							return _elm_lang$core$Native_Utils.update(
								range,
								{xmax: v});
						case 'ymin':
							return _elm_lang$core$Native_Utils.update(
								range,
								{ymin: v});
						case 'ymax':
							return _elm_lang$core$Native_Utils.update(
								range,
								{ymax: v});
						default:
							return range;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pasRange: newRange}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdatePasScaling':
				var d = A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(_elm_community$list_extra$List_Extra$getAt, 2, model.pasPlotData)) ? _user$project$Main$MicFreq : _user$project$Main$MicTime;
				var max_ = _elm_lang$core$Native_Utils.eq(d, _user$project$Main$MicFreq) ? 1200 : 0;
				var maxdata = A3(
					_elm_lang$core$List$foldl,
					_user$project$Main$max3,
					{ctor: '_Tuple3', _0: 0, _1: 0, _2: 0},
					A3(_user$project$Main$getPasTimeData, model, max_, d));
				var mindata = A3(
					_elm_lang$core$List$foldl,
					_user$project$Main$min3,
					maxdata,
					A3(_user$project$Main$getPasTimeData, model, max_, d));
				var range = {
					xmin: _user$project$Main$firstElement(mindata),
					xmax: _user$project$Main$firstElement(maxdata),
					ymax: _elm_lang$core$Basics$toFloat(
						_elm_lang$core$Basics$ceiling(
							A2(
								_elm_lang$core$Basics$max,
								_user$project$Main$secondElement(maxdata),
								_user$project$Main$thirdElement(maxdata)))),
					ymin: _elm_lang$core$Basics$toFloat(
						_elm_lang$core$Basics$floor(
							A2(
								_elm_lang$core$Basics$min,
								_user$project$Main$secondElement(mindata),
								_user$project$Main$thirdElement(mindata))))
				};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pasRange: range}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateCrdRange':
				var range = model.crdRange;
				var v = A2(
					_elm_lang$core$Result$withDefault,
					0,
					_elm_lang$core$String$toFloat(_p31._1));
				var newRange = function () {
					var _p51 = _p31._0;
					switch (_p51) {
						case 'xmin':
							return _elm_lang$core$Native_Utils.update(
								range,
								{xmin: v});
						case 'xmax':
							return _elm_lang$core$Native_Utils.update(
								range,
								{xmax: v});
						case 'ymin':
							return _elm_lang$core$Native_Utils.update(
								range,
								{ymin: v});
						case 'ymax':
							return _elm_lang$core$Native_Utils.update(
								range,
								{ymax: v});
						default:
							return range;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{crdRange: newRange}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateCrdScaling':
				var maxdata = A3(
					_elm_lang$core$List$foldl,
					_user$project$Main$max3,
					{ctor: '_Tuple3', _0: 0, _1: 0, _2: 0},
					_user$project$Main$getRingdownData(model));
				var mindata = A3(
					_elm_lang$core$List$foldl,
					_user$project$Main$min3,
					maxdata,
					_user$project$Main$getRingdownData(model));
				var range = {
					xmin: _user$project$Main$firstElement(mindata),
					xmax: _user$project$Main$firstElement(maxdata),
					ymax: _elm_lang$core$Basics$toFloat(
						_elm_lang$core$Basics$ceiling(
							A2(
								_elm_lang$core$Basics$max,
								_user$project$Main$secondElement(maxdata),
								_user$project$Main$thirdElement(maxdata)))),
					ymin: _elm_lang$core$Basics$toFloat(
						_elm_lang$core$Basics$floor(
							A2(
								_elm_lang$core$Basics$min,
								_user$project$Main$secondElement(mindata),
								_user$project$Main$thirdElement(mindata))))
				};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{crdRange: range}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleCrdPlot':
				var _p52 = _p31._0;
				var d = A2(
					_elm_lang$core$Maybe$withDefault,
					false,
					A2(_elm_community$list_extra$List_Extra$getAt, _p52, model.crdPlotData));
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						crdPlotData: A3(_elm_community$list_extra$List_Extra$setAt, _p52, !d, model.crdPlotData)
					});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SequenceState':
				var newState = _elm_lang$core$Native_Utils.eq(model.cvt.sequence_state, 'Run') ? 'Pause' : 'Run';
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$changeSequenceState, newState, model)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Main$changeSequenceState, 'Reset', model)
				};
		}
	});
var _user$project$Main$viewPas = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 2),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 4),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Phone, 5),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$div,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'border-style', 'solid'),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'border-width', '1px'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'border-radius', '5px'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-left', '10px'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-top', '10px'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: A3(
								_debois$elm_mdl$Material_Options$styled,
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Typography$title,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Laser Input'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A5(
									_user$project$Main$toggle,
									18,
									'Power 1',
									model.pas.cvt.enable_0,
									model,
									_user$project$Main$TogglePasLaserPower(0)),
								_1: {
									ctor: '::',
									_0: A6(
										_user$project$Main$intTextfield,
										11,
										model,
										_elm_lang$core$Maybe$Just('Channel 1'),
										model.pas.cvt.fmod_0,
										_user$project$Main$UpdateMod0,
										_elm_lang$core$Maybe$Just(
											_user$project$Main$SendModulation('0'))),
									_1: {
										ctor: '::',
										_0: A5(
											_user$project$Main$toggle,
											19,
											'Power 2',
											model.pas.cvt.enable_1,
											model,
											_user$project$Main$TogglePasLaserPower(1)),
										_1: {
											ctor: '::',
											_0: A6(
												_user$project$Main$intTextfield,
												12,
												model,
												_elm_lang$core$Maybe$Just('Channel 2'),
												model.pas.cvt.fmod_1,
												_user$project$Main$UpdateMod1,
												_elm_lang$core$Maybe$Just(
													_user$project$Main$SendModulation('1'))),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$div,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'border-style', 'solid'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'border-width', '1px'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'border-radius', '5px'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-left', '10px'),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-top', '10px'),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '10px'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: A3(
									_debois$elm_mdl$Material_Options$styled,
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Typography$title,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Speaker Input'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A5(
										_user$project$Main$toggle,
										10,
										'Channel 1',
										model.pas.cvt.speaker_0,
										model,
										_user$project$Main$ToggleSpeaker(0)),
									_1: {
										ctor: '::',
										_0: A5(
											_user$project$Main$toggle,
											11,
											'Channel 2',
											model.pas.cvt.speaker_1,
											model,
											_user$project$Main$ToggleSpeaker(1)),
										_1: {
											ctor: '::',
											_0: A6(
												_user$project$Main$txtfield,
												14,
												model,
												_elm_lang$core$Maybe$Just('Center (Hz)'),
												model.pas.cvt.spk.center,
												function (_p53) {
													return _user$project$Main$Pas(
														_user$project$Pas$UpdateSpkFcenter(_p53));
												},
												_elm_lang$core$Maybe$Just(_user$project$Main$UpdateChirp)),
											_1: {
												ctor: '::',
												_0: A6(
													_user$project$Main$txtfield,
													15,
													model,
													_elm_lang$core$Maybe$Just('Df (Hz)'),
													model.pas.cvt.spk.df,
													function (_p54) {
														return _user$project$Main$Pas(
															_user$project$Pas$UpdateSpkDf(_p54));
													},
													_elm_lang$core$Maybe$Just(_user$project$Main$UpdateChirp)),
												_1: {
													ctor: '::',
													_0: A6(
														_user$project$Main$txtfield,
														16,
														model,
														_elm_lang$core$Maybe$Just('Vscale (V)'),
														model.pas.cvt.spk.vscale,
														function (_p55) {
															return _user$project$Main$Pas(
																_user$project$Pas$UpdateSpkVscale(_p55));
														},
														_elm_lang$core$Maybe$Just(_user$project$Main$SendSpkVoltage)),
													_1: {
														ctor: '::',
														_0: A6(
															_user$project$Main$txtfield,
															17,
															model,
															_elm_lang$core$Maybe$Just('Voffset (V)'),
															model.pas.cvt.spk.voffset,
															function (_p56) {
																return _user$project$Main$Pas(
																	_user$project$Pas$UpdateSpkVoffset(_p56));
															},
															_elm_lang$core$Maybe$Just(_user$project$Main$SendSpkVoltage)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 10),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 8),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Phone, 7),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Grid$grid,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Grid$cell,
									{
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Table$table,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Table$thead,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Table$tr,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Table$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Cell'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html_Attributes$property,
																						'innerHTML',
																						_elm_lang$core$Json_Encode$string('f<sub>0</sub>')),
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Q'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('IA'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html_Attributes$property,
																									'innerHTML',
																									_elm_lang$core$Json_Encode$string('&sigma;<sub>abs</sub>')),
																								_1: {ctor: '[]'}
																							},
																							{ctor: '[]'}),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html_Attributes$property,
																										'innerHTML',
																										_elm_lang$core$Json_Encode$string('V<sub>rms</sub>')),
																									_1: {ctor: '[]'}
																								},
																								{ctor: '[]'}),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Table$tr,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Table$th,
																		{ctor: '[]'},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('(Hz)'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('(a.u.)'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('(a.u.)'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html_Attributes$property,
																										'innerHTML',
																										_elm_lang$core$Json_Encode$string('(Mm<sup>-1</sup>)')),
																									_1: {ctor: '[]'}
																								},
																								{ctor: '[]'}),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('(V)'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Table$tbody,
														{ctor: '[]'},
														A2(
															_elm_lang$core$List$map,
															function (cell) {
																var data = _elm_lang$core$Tuple$second(cell);
																var name = _elm_lang$core$Tuple$first(cell);
																return A2(
																	_debois$elm_mdl$Material_Table$tr,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Table$td,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(name),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Table$td,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_user$project$Main$printableNumeric(data.resonant_frequency)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_debois$elm_mdl$Material_Table$td,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_user$project$Main$printableNumeric(data.q)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_debois$elm_mdl$Material_Table$td,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_user$project$Main$printableNumeric(data.integrated_area)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_debois$elm_mdl$Material_Table$td,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_user$project$Main$printableNumeric(data.absorption)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_debois$elm_mdl$Material_Table$td,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_user$project$Main$printableNumeric(data.laserRMS)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	});
															},
															A3(
																_elm_lang$core$List$map2,
																F2(
																	function (v0, v1) {
																		return {ctor: '_Tuple2', _0: v0, _1: v1};
																	}),
																{
																	ctor: '::',
																	_0: 'Channel 1',
																	_1: {
																		ctor: '::',
																		_0: 'Channel 2',
																		_1: {ctor: '[]'}
																	}
																},
																_elm_lang$core$Array$toList(model.pas.data.cell)))),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Grid$cell,
										{
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: function () {
												var p = A2(
													_elm_lang$core$Maybe$withDefault,
													false,
													A2(_elm_community$list_extra$List_Extra$getAt, 2, model.pasPlotData)) ? _user$project$Main$MicFreq : _user$project$Main$MicTime;
												var max_ = _elm_lang$core$Native_Utils.eq(p, _user$project$Main$MicFreq) ? 1200 : 0;
												return A4(
													_user$project$Main$timeData,
													model,
													model.pasRange,
													A3(_user$project$Main$getPasTimeData, model, max_, p),
													A2(_elm_lang$core$List$take, 2, model.pasPlotData));
											}(),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Grid$cell,
											{
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A5(
													_debois$elm_mdl$Material_Toggles$checkbox,
													_user$project$Main$Mdl,
													{
														ctor: '::',
														_0: 100,
														_1: {ctor: '[]'}
													},
													model.mdl,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Toggles$value(
															A2(
																_elm_lang$core$Maybe$withDefault,
																false,
																A2(_elm_community$list_extra$List_Extra$getAt, 0, model.pasPlotData))),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Toggles$ripple,
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$onToggle(
																	_user$project$Main$TogglePasPlot(0)),
																_1: {
																	ctor: '::',
																	_0: A2(_debois$elm_mdl$Material_Options$css, 'color', 'blue'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Channel 1'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A5(
														_debois$elm_mdl$Material_Toggles$checkbox,
														_user$project$Main$Mdl,
														{
															ctor: '::',
															_0: 101,
															_1: {ctor: '[]'}
														},
														model.mdl,
														{
															ctor: '::',
															_0: _debois$elm_mdl$Material_Toggles$value(
																A2(
																	_elm_lang$core$Maybe$withDefault,
																	false,
																	A2(_elm_community$list_extra$List_Extra$getAt, 1, model.pasPlotData))),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$onToggle(
																	_user$project$Main$TogglePasPlot(1)),
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Toggles$ripple,
																	_1: {
																		ctor: '::',
																		_0: A2(_debois$elm_mdl$Material_Options$css, 'color', 'red'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Channel 2'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A5(
															_debois$elm_mdl$Material_Toggles$switch,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 102,
																_1: {ctor: '[]'}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Toggles$value(
																	A2(
																		_elm_lang$core$Maybe$withDefault,
																		false,
																		A2(_elm_community$list_extra$List_Extra$getAt, 2, model.pasPlotData))),
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Options$onToggle(
																		_user$project$Main$TogglePasPlot(2)),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: function () {
																	var s = A2(
																		_elm_lang$core$Maybe$withDefault,
																		false,
																		A2(_elm_community$list_extra$List_Extra$getAt, 2, model.pasPlotData)) ? 'Frequency' : 'Time';
																	return _elm_lang$html$Html$text(s);
																}(),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A5(
																_debois$elm_mdl$Material_Textfield$render,
																_user$project$Main$Mdl,
																{
																	ctor: '::',
																	_0: 103,
																	_1: {ctor: '[]'}
																},
																model.mdl,
																{
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$value(
																			_elm_lang$core$Basics$toString(model.pasRange.xmin)),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onInput(
																				_user$project$Main$UpdatePasRange('xmin')),
																			_1: {
																				ctor: '::',
																				_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$label('xMin'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A5(
																	_debois$elm_mdl$Material_Textfield$render,
																	_user$project$Main$Mdl,
																	{
																		ctor: '::',
																		_0: 103,
																		_1: {ctor: '[]'}
																	},
																	model.mdl,
																	{
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Textfield$value(
																				_elm_lang$core$Basics$toString(model.pasRange.xmax)),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options$onInput(
																					_user$project$Main$UpdatePasRange('xmax')),
																				_1: {
																					ctor: '::',
																					_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																						_1: {
																							ctor: '::',
																							_0: _debois$elm_mdl$Material_Textfield$label('xMax'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A5(
																		_debois$elm_mdl$Material_Textfield$render,
																		_user$project$Main$Mdl,
																		{
																			ctor: '::',
																			_0: 104,
																			_1: {ctor: '[]'}
																		},
																		model.mdl,
																		{
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Textfield$value(
																					_elm_lang$core$Basics$toString(model.pasRange.ymin)),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Options$onInput(
																						_user$project$Main$UpdatePasRange('ymin')),
																					_1: {
																						ctor: '::',
																						_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																						_1: {
																							ctor: '::',
																							_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																							_1: {
																								ctor: '::',
																								_0: _debois$elm_mdl$Material_Textfield$label('yMin'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A5(
																			_debois$elm_mdl$Material_Textfield$render,
																			_user$project$Main$Mdl,
																			{
																				ctor: '::',
																				_0: 105,
																				_1: {ctor: '[]'}
																			},
																			model.mdl,
																			{
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Textfield$value(
																						_elm_lang$core$Basics$toString(model.pasRange.ymax)),
																					_1: {
																						ctor: '::',
																						_0: _debois$elm_mdl$Material_Options$onInput(
																							_user$project$Main$UpdatePasRange('ymax')),
																						_1: {
																							ctor: '::',
																							_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '125px'),
																							_1: {
																								ctor: '::',
																								_0: _debois$elm_mdl$Material_Textfield$maxlength(15),
																								_1: {
																									ctor: '::',
																									_0: _debois$elm_mdl$Material_Textfield$label('yMax'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A4(_user$project$Main$button, 106, 'Autoscale 1x', model, _user$project$Main$UpdatePasScaling),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$viewBody = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-bottom', '35px'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 12),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: function () {
						var _p57 = model.selectedTab;
						switch (_p57) {
							case 0:
								return _user$project$Main$viewMain(model);
							case 1:
								return _user$project$Main$viewPas(model);
							case 2:
								return _user$project$Main$viewCrd(model);
							case 3:
								return _user$project$Main$viewAux(model);
							case 4:
								return _user$project$Main$viewCal(model);
							case 5:
								return _user$project$Main$viewConfig(model);
							case 6:
								return _user$project$Main$viewStatus(model);
							default:
								return _elm_lang$html$Html$text('404');
						}
					}(),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$view = function (model) {
	return A4(
		_debois$elm_mdl$Material_Layout$render,
		_user$project$Main$Mdl,
		model.mdl,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Layout$fixedHeader,
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$waterfall(true),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$onSelectTab(_user$project$Main$SelectTab),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Layout$selectedTab(model.selectedTab),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			header: _user$project$Main$pageHeader(model),
			drawer: _user$project$Main$viewDrawer(model),
			tabs: {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Main'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text('PAS'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('CRD'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Auxilary'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('Automation'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('Configuration'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text('Health'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Color$background(
						A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$LightBlue, _debois$elm_mdl$Material_Color$S400)),
					_1: {ctor: '[]'}
				}
			},
			main: {
				ctor: '::',
				_0: _user$project$Main$viewBody(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$viewFooter(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
