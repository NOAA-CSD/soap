var _user$project$GcrdTypes$setCalibration = F2(
	function (cal, cvt) {
		return _elm_lang$core$Native_Utils.update(
			cvt,
			{cal_state: cal});
	});
var _user$project$GcrdTypes$switchPump = function (cvt) {
	return _elm_lang$core$Native_Utils.update(
		cvt,
		{pump: !cvt.pump});
};
var _user$project$GcrdTypes$setFanVoltage = F2(
	function (volts, cvt) {
		return _elm_lang$core$Native_Utils.update(
			cvt,
			{fan_voltage: volts});
	});
var _user$project$GcrdTypes$setFanEnable = F2(
	function (val, cvt) {
		return _elm_lang$core$Native_Utils.update(
			cvt,
			{fan: val});
	});
var _user$project$GcrdTypes$setCalibrationCvt = F2(
	function (cal, cvt) {
		return _elm_lang$core$Native_Utils.update(
			cvt,
			{cal_state: cal});
	});
var _user$project$GcrdTypes$asCalibrationIn = _elm_lang$core$Basics$flip(_user$project$GcrdTypes$setCalibrationCvt);
var _user$project$GcrdTypes$toggleUVLampPosition = function (cal) {
	return _elm_lang$core$Native_Utils.update(
		cal,
		{uv_lamp: !cal.uv_lamp});
};
var _user$project$GcrdTypes$toggleO2AddPosition = function (cal) {
	return _elm_lang$core$Native_Utils.update(
		cal,
		{o2_add: !cal.o2_add});
};
var _user$project$GcrdTypes$toggleO3AddPosition = function (cal) {
	return _elm_lang$core$Native_Utils.update(
		cal,
		{o3_add: !cal.o3_add});
};
var _user$project$GcrdTypes$temperatureToArray = function (t) {
	return _elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: t.pasCell1,
			_1: {
				ctor: '::',
				_0: t.pasCell2,
				_1: {
					ctor: '::',
					_0: t.pasLaserHead1,
					_1: {
						ctor: '::',
						_0: t.pasLaserHead2,
						_1: {
							ctor: '::',
							_0: t.cjc0,
							_1: {
								ctor: '::',
								_0: t.boxExit,
								_1: {
									ctor: '::',
									_0: t.crdHeater,
									_1: {
										ctor: '::',
										_0: t.boxInlet,
										_1: {
											ctor: '::',
											_0: t.crdLaserHead,
											_1: {
												ctor: '::',
												_0: t.cjc1,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$GcrdTypes$getTemperature = F2(
	function (index, t) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			A2(
				_elm_lang$core$Array$get,
				index,
				_user$project$GcrdTypes$temperatureToArray(t)));
	});
var _user$project$GcrdTypes$setFilter = F2(
	function (filt, cvt) {
		return _elm_lang$core$Native_Utils.update(
			cvt,
			{filter: filt});
	});
var _user$project$GcrdTypes$asFilterIn = _elm_lang$core$Basics$flip(_user$project$GcrdTypes$setFilter);
var _user$project$GcrdTypes$toggleFilterPosition = function (f) {
	var val = _elm_lang$core$Native_Utils.eq(f.pos, 0) ? 1 : 0;
	return _elm_lang$core$Native_Utils.update(
		f,
		{pos: val});
};
var _user$project$GcrdTypes$setMessages = F2(
	function (msgs, data) {
		return _elm_lang$core$Native_Utils.update(
			data,
			{msg: msgs});
	});
var _user$project$GcrdTypes$defaultPptData = {id: 'default', pressure: 0, temperature: 0};
var _user$project$GcrdTypes$defaultVaisalaData = {id: 'default', temperature: 0, relative_humidity: 0, dewpoint: 0};
var _user$project$GcrdTypes$VaisalaData = F4(
	function (a, b, c, d) {
		return {id: a, temperature: b, relative_humidity: c, dewpoint: d};
	});
var _user$project$GcrdTypes$PptData = F3(
	function (a, b, c) {
		return {id: a, pressure: b, temperature: c};
	});
var _user$project$GcrdTypes$Data = F4(
	function (a, b, c, d) {
		return {time: a, msg: b, interlock: c, temperatures: d};
	});
var _user$project$GcrdTypes$Filter = function (a) {
	return {pos: a};
};
var _user$project$GcrdTypes$decodeFilter = A2(
	_elm_lang$core$Json_Decode$map,
	_user$project$GcrdTypes$Filter,
	A2(_elm_lang$core$Json_Decode$field, 'cell', _elm_lang$core$Json_Decode$int));
var _user$project$GcrdTypes$Temperatures = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {pasCell1: a, pasCell2: b, pasLaserHead1: c, pasLaserHead2: d, cjc0: e, boxExit: f, crdHeater: g, boxInlet: h, crdLaserHead: i, cjc1: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$GcrdTypes$defaultData = A4(
	_user$project$GcrdTypes$Data,
	'0',
	{ctor: '[]'},
	false,
	_user$project$GcrdTypes$Temperatures(0)(0)(0)(0)(0)(0)(0)(0)(0)(0));
var _user$project$GcrdTypes$decodeTemperatures = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'cjc1',
	_elm_lang$core$Json_Decode$float,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'crd_laser_head',
		_elm_lang$core$Json_Decode$float,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'box_inlet',
			_elm_lang$core$Json_Decode$float,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'crd_heater',
				_elm_lang$core$Json_Decode$float,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'box_exit',
					_elm_lang$core$Json_Decode$float,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'cjc0',
						_elm_lang$core$Json_Decode$float,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'pas_las_head_2',
							_elm_lang$core$Json_Decode$float,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'pas_las_head_1',
								_elm_lang$core$Json_Decode$float,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'pas_cell_2',
									_elm_lang$core$Json_Decode$float,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'pas_cell_1',
										_elm_lang$core$Json_Decode$float,
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$GcrdTypes$Temperatures)))))))))));
var _user$project$GcrdTypes$decodeData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'temperatures',
	_user$project$GcrdTypes$decodeTemperatures,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'interlock',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'msgs',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'Time',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$GcrdTypes$Data)))));
var _user$project$GcrdTypes$Calibration = F3(
	function (a, b, c) {
		return {o2_add: a, o3_add: b, uv_lamp: c};
	});
var _user$project$GcrdTypes$decodeCal = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$GcrdTypes$Calibration,
	A2(_elm_lang$core$Json_Decode$field, 'o2_add', _elm_lang$core$Json_Decode$bool),
	A2(_elm_lang$core$Json_Decode$field, 'o3_add', _elm_lang$core$Json_Decode$bool),
	A2(_elm_lang$core$Json_Decode$field, 'uv_lamp', _elm_lang$core$Json_Decode$bool));
var _user$project$GcrdTypes$defaultCvtData = {
	pump: false,
	cal_state: A3(_user$project$GcrdTypes$Calibration, false, false, false),
	devIds: {ctor: '[]'},
	filter: _user$project$GcrdTypes$Filter(0),
	fan: false,
	fan_voltage: 0
};
var _user$project$GcrdTypes$Cvt = F6(
	function (a, b, c, d, e, f) {
		return {pump: a, cal_state: b, devIds: c, filter: d, fan: e, fan_voltage: f};
	});
var _user$project$GcrdTypes$decodeCvt = function (cvt) {
	return A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
		{
			ctor: '::',
			_0: 'general',
			_1: {
				ctor: '::',
				_0: 'fan_speed',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$float,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
			{
				ctor: '::',
				_0: 'general',
				_1: {
					ctor: '::',
					_0: 'fan',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'filter',
				_user$project$GcrdTypes$decodeFilter,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
					{
						ctor: '::',
						_0: 'general',
						_1: {
							ctor: '::',
							_0: 'dev_ids',
							_1: {ctor: '[]'}
						}
					},
					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'calibration',
						_user$project$GcrdTypes$decodeCal,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
							{
								ctor: '::',
								_0: 'general',
								_1: {
									ctor: '::',
									_0: 'vacuum_pump',
									_1: {ctor: '[]'}
								}
							},
							_elm_lang$core$Json_Decode$bool,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$GcrdTypes$Cvt)))))));
};
