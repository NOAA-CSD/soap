var _user$project$Network$buildAddress = function (model) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'http://',
		A2(
			_elm_lang$core$Basics_ops['++'],
			model.ip,
			A2(
				_elm_lang$core$Basics_ops['++'],
				':',
				A2(
					_elm_lang$core$Basics_ops['++'],
					model.port_,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/',
						A2(_elm_lang$core$Basics_ops['++'], model.service, '/'))))));
};
var _user$project$Network$init = function (model) {
	return model;
};
var _user$project$Network$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'UpdateIP') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{ip: _p0._0});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{port_: _p0._0});
		}
	});
var _user$project$Network$updateIpConfig = _elm_lang$core$Native_Platform.outgoingPort(
	'updateIpConfig',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return v;
			});
	});
var _user$project$Network$initPort = _elm_lang$core$Native_Platform.incomingPort(
	'initPort',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return _elm_lang$core$Json_Decode$succeed(
						{ctor: '_Tuple2', _0: x0, _1: x1});
				},
				A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string)));
var _user$project$Network$Model = F3(
	function (a, b, c) {
		return {ip: a, port_: b, service: c};
	});
var _user$project$Network$UpdatePort = function (a) {
	return {ctor: 'UpdatePort', _0: a};
};
var _user$project$Network$UpdateIP = function (a) {
	return {ctor: 'UpdateIP', _0: a};
};
