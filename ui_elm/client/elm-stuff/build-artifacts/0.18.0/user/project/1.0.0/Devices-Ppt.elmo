var _user$project$Devices_Ppt$insertPptDev = F2(
	function (devs, model) {
		var pdev = A2(
			_elm_lang$core$List$map,
			function (dev) {
				var device = _elm_lang$core$Tuple$second(dev);
				var d = _elm_lang$core$Native_Utils.eq(device.type_, 'ppt') ? dev : {ctor: '_Tuple2', _0: '', _1: _user$project$Devices_Device$defaultDevice};
				return d;
			},
			_elm_lang$core$Dict$toList(devs));
		var dev_ = A2(_elm_lang$core$List$filter, _user$project$Devices_Device$checkEmptyDevice, pdev);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				cvt: _elm_lang$core$Dict$fromList(dev_)
			});
	});
var _user$project$Devices_Ppt$defaultCvt = A2(_elm_lang$core$Dict$singleton, 'NullDevice', _user$project$Devices_Device$defaultDevice);
var _user$project$Devices_Ppt$Model = F2(
	function (a, b) {
		return {cvt: a, data: b};
	});
var _user$project$Devices_Ppt$Data = F2(
	function (a, b) {
		return {pressure: a, temperature: b};
	});
var _user$project$Devices_Ppt$defaultData = A2(
	_elm_lang$core$Dict$singleton,
	'NullData',
	A2(_user$project$Devices_Ppt$Data, 0, 0));
var _user$project$Devices_Ppt$init = A2(_user$project$Devices_Ppt$Model, _user$project$Devices_Ppt$defaultCvt, _user$project$Devices_Ppt$defaultData);
var _user$project$Devices_Ppt$decodeData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	't',
	_elm_lang$core$Json_Decode$float,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'p',
		_elm_lang$core$Json_Decode$float,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Devices_Ppt$Data)));
var _user$project$Devices_Ppt$getPptData = F2(
	function (data, model) {
		var d = A2(
			_elm_lang$core$List$map,
			function (d) {
				var id = _elm_lang$core$Tuple$first(d);
				var d_ = A2(
					_elm_lang$core$Result$withDefault,
					A2(_user$project$Devices_Ppt$Data, 0, 0),
					A2(
						_elm_lang$core$Json_Decode$decodeString,
						A2(_elm_lang$core$Json_Decode$field, id, _user$project$Devices_Ppt$decodeData),
						data));
				return {ctor: '_Tuple2', _0: id, _1: d_};
			},
			_elm_lang$core$Dict$toList(model.cvt));
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				data: _elm_lang$core$Dict$fromList(d)
			});
	});
