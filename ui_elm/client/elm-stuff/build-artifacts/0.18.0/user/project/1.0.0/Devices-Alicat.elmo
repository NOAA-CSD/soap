var _user$project$Devices_Alicat$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'UpdateSetpoint') {
			var _p2 = _p0._0;
			var _p1 = A2(_elm_lang$core$Dict$get, _p2, model.cvt);
			if (_p1.ctor === 'Just') {
				var n_device = A2(_user$project$Devices_Device$updateSPinDev, _p0._1, _p1._0);
				var n_dict = A3(_elm_lang$core$Dict$insert, _p2, n_device, model.cvt);
				return _elm_lang$core$Native_Utils.update(
					model,
					{cvt: n_dict});
			} else {
				return model;
			}
		} else {
			return model;
		}
	});
var _user$project$Devices_Alicat$insertAlicatDev = F2(
	function (devs, model) {
		var adev = A2(
			_elm_lang$core$List$map,
			function (dev) {
				var device = _elm_lang$core$Tuple$second(dev);
				var d = _elm_lang$core$Native_Utils.eq(device.type_, 'alicat') ? dev : {ctor: '_Tuple2', _0: '', _1: _user$project$Devices_Device$defaultDevice};
				return d;
			},
			_elm_lang$core$Dict$toList(devs));
		var a_dev = A2(_elm_lang$core$List$filter, _user$project$Devices_Device$checkEmptyDevice, adev);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				cvt: _elm_lang$core$Dict$fromList(a_dev)
			});
	});
var _user$project$Devices_Alicat$asCvtIn = F2(
	function (model, dict) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{cvt: dict});
	});
var _user$project$Devices_Alicat$Data = F5(
	function (a, b, c, d, e) {
		return {pressure: a, temperature: b, setpoint: c, mass_flow: d, output: e};
	});
var _user$project$Devices_Alicat$defaultDictData = A2(
	_elm_lang$core$Dict$singleton,
	'Default_Alicat',
	A5(_user$project$Devices_Alicat$Data, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, 0));
var _user$project$Devices_Alicat$init = {data: _user$project$Devices_Alicat$defaultDictData, cvt: _user$project$Devices_Device$defaultDeviceDict};
var _user$project$Devices_Alicat$defaultData = A5(_user$project$Devices_Alicat$Data, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, 0);
var _user$project$Devices_Alicat$decodeData = A6(
	_elm_lang$core$Json_Decode$map5,
	_user$project$Devices_Alicat$Data,
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'P', _elm_lang$core$Json_Decode$float)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'T', _elm_lang$core$Json_Decode$float)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'Qsp', _elm_lang$core$Json_Decode$float)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'Q0', _elm_lang$core$Json_Decode$float)),
	A2(_elm_lang$core$Json_Decode$field, 'Q', _elm_lang$core$Json_Decode$float));
var _user$project$Devices_Alicat$getAlicatData = F2(
	function (model, data) {
		var test = A2(
			_elm_lang$core$List$map,
			function (d) {
				var id = _elm_lang$core$Tuple$first(d);
				var d_ = A2(
					_elm_lang$core$Result$withDefault,
					_user$project$Devices_Alicat$defaultData,
					A2(
						_elm_lang$core$Json_Decode$decodeString,
						A2(_elm_lang$core$Json_Decode$field, id, _user$project$Devices_Alicat$decodeData),
						data));
				return {ctor: '_Tuple2', _0: id, _1: d_};
			},
			_elm_lang$core$Dict$toList(model.cvt));
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				data: _elm_lang$core$Dict$fromList(test)
			});
	});
var _user$project$Devices_Alicat$Model = F2(
	function (a, b) {
		return {cvt: a, data: b};
	});
var _user$project$Devices_Alicat$P = {ctor: 'P'};
var _user$project$Devices_Alicat$PC = {ctor: 'PC'};
var _user$project$Devices_Alicat$V = {ctor: 'V'};
var _user$project$Devices_Alicat$VC = {ctor: 'VC'};
var _user$project$Devices_Alicat$M = {ctor: 'M'};
var _user$project$Devices_Alicat$MC = {ctor: 'MC'};
var _user$project$Devices_Alicat$dtype = function () {
	var helper = function (s) {
		return _elm_lang$core$Native_Utils.eq(s, 'MC') ? _elm_lang$core$Json_Decode$succeed(_user$project$Devices_Alicat$MC) : (_elm_lang$core$Native_Utils.eq(s, 'VC') ? _elm_lang$core$Json_Decode$succeed(_user$project$Devices_Alicat$VC) : (_elm_lang$core$Native_Utils.eq(s, 'V') ? _elm_lang$core$Json_Decode$succeed(_user$project$Devices_Alicat$V) : (_elm_lang$core$Native_Utils.eq(s, 'M') ? _elm_lang$core$Json_Decode$succeed(_user$project$Devices_Alicat$M) : (_elm_lang$core$Native_Utils.eq(s, 'P') ? _elm_lang$core$Json_Decode$succeed(_user$project$Devices_Alicat$P) : (_elm_lang$core$Native_Utils.eq(s, 'PC') ? _elm_lang$core$Json_Decode$succeed(_user$project$Devices_Alicat$PC) : _elm_lang$core$Json_Decode$fail('Failed to decode dtype'))))));
	};
	return A2(_elm_lang$core$Json_Decode$andThen, helper, _elm_lang$core$Json_Decode$string);
}();
var _user$project$Devices_Alicat$SendNewSetpoint = function (a) {
	return {ctor: 'SendNewSetpoint', _0: a};
};
var _user$project$Devices_Alicat$UpdateSetpoint = F2(
	function (a, b) {
		return {ctor: 'UpdateSetpoint', _0: a, _1: b};
	});
